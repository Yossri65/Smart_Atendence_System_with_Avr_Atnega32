
Sec_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000306a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  0000306a  000030fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  008000f6  008000f6  00003194  2**0
                  ALLOC
  3 .debug_aranges 000003b0  00000000  00000000  00003194  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000066d  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003d52  00000000  00000000  00003bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000188f  00000000  00000000  00007903  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003450  00000000  00000000  00009192  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000520  00000000  00000000  0000c5e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000dde  00000000  00000000  0000cb04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  0000d8e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000167bf  00000000  00000000  0000e170  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0002492f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__vector_17>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 30       	cpi	r26, 0x0F	; 15
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <main>
      8a:	0c 94 33 18 	jmp	0x3066	; 0x3066 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 18 18 	jmp	0x3030	; 0x3030 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 18 18 	jmp	0x3030	; 0x3030 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 04 18 	jmp	0x3008	; 0x3008 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 28 18 	jmp	0x3050	; 0x3050 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <EEPROM_Read_Byte>:
 */
#include "eeprom.h"

static void (*(EEPROM_interrupt)) (void);
void EEPROM_Read_Byte(uint8 address,uint8 *_value)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <EEPROM_Read_Byte+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	7b 83       	std	Y+3, r23	; 0x03
     cae:	6a 83       	std	Y+2, r22	; 0x02

	while(EECR & (1<<EEWE));
     cb0:	ec e3       	ldi	r30, 0x3C	; 60
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	88 2f       	mov	r24, r24
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	82 70       	andi	r24, 0x02	; 2
     cbc:	90 70       	andi	r25, 0x00	; 0
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	b9 f7       	brne	.-18     	; 0xcb0 <EEPROM_Read_Byte+0x12>


	EEAR = address;
     cc2:	ee e3       	ldi	r30, 0x3E	; 62
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	80 83       	st	Z, r24

	EECR |= (1<<EERE);
     cd0:	ac e3       	ldi	r26, 0x3C	; 60
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ec e3       	ldi	r30, 0x3C	; 60
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	81 60       	ori	r24, 0x01	; 1
     cdc:	8c 93       	st	X, r24


	*_value = EEDR;
     cde:	ed e3       	ldi	r30, 0x3D	; 61
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	ea 81       	ldd	r30, Y+2	; 0x02
     ce6:	fb 81       	ldd	r31, Y+3	; 0x03
     ce8:	80 83       	st	Z, r24

}
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <EEPROM_Write_Byte>:


void EEPROM_Write_Byte(uint8 address,uint8 _value)
{
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <EEPROM_Write_Byte+0x6>
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	89 83       	std	Y+1, r24	; 0x01
     d02:	6a 83       	std	Y+2, r22	; 0x02
	while(EECR & (1<<EEWE));
     d04:	ec e3       	ldi	r30, 0x3C	; 60
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	88 2f       	mov	r24, r24
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	82 70       	andi	r24, 0x02	; 2
     d10:	90 70       	andi	r25, 0x00	; 0
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	b9 f7       	brne	.-18     	; 0xd04 <EEPROM_Write_Byte+0xe>
		EEAR = address;
     d16:	ee e3       	ldi	r30, 0x3E	; 62
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	88 2f       	mov	r24, r24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	80 83       	st	Z, r24
		EECR |= (1<<EERE);
     d24:	ac e3       	ldi	r26, 0x3C	; 60
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ec e3       	ldi	r30, 0x3C	; 60
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	81 60       	ori	r24, 0x01	; 1
     d30:	8c 93       	st	X, r24
		if(EEDR != _value)
     d32:	ed e3       	ldi	r30, 0x3D	; 61
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	90 81       	ld	r25, Z
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	98 17       	cp	r25, r24
     d3c:	91 f0       	breq	.+36     	; 0xd62 <EEPROM_Write_Byte+0x6c>
		{
			EEDR = _value;
     d3e:	ed e3       	ldi	r30, 0x3D	; 61
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	80 83       	st	Z, r24
			EECR |= (1<<EEMWE);
     d46:	ac e3       	ldi	r26, 0x3C	; 60
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	ec e3       	ldi	r30, 0x3C	; 60
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	84 60       	ori	r24, 0x04	; 4
     d52:	8c 93       	st	X, r24
			EECR |= (1<<EEWE);
     d54:	ac e3       	ldi	r26, 0x3C	; 60
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	ec e3       	ldi	r30, 0x3C	; 60
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	82 60       	ori	r24, 0x02	; 2
     d60:	8c 93       	st	X, r24
		}

}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <EEPROM_Interupt_Enable>:

void EEPROM_Interupt_Enable(void)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
	SetBit(EECR,EERIE);
     d74:	ac e3       	ldi	r26, 0x3C	; 60
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	ec e3       	ldi	r30, 0x3C	; 60
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	88 60       	ori	r24, 0x08	; 8
     d80:	8c 93       	st	X, r24

}
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <EEPROM_Interupt_Disable>:
void EEPROM_Interupt_Disable(void)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
	ClearBit(EECR,EERIE);
     d90:	ac e3       	ldi	r26, 0x3C	; 60
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ec e3       	ldi	r30, 0x3C	; 60
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	87 7f       	andi	r24, 0xF7	; 247
     d9c:	8c 93       	st	X, r24

}
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <EEPROM_Set_CallBack>:
void EEPROM_Set_CallBack(void(*Local_ptr)(void))
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <EEPROM_Set_CallBack+0x6>
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
	EEPROM_interrupt=Local_ptr;
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	90 93 f7 00 	sts	0x00F7, r25
     dba:	80 93 f6 00 	sts	0x00F6, r24
}
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <__vector_17>:

 ISR(EE_RDY_vect)
{
     dc8:	1f 92       	push	r1
     dca:	0f 92       	push	r0
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	0f 92       	push	r0
     dd0:	11 24       	eor	r1, r1
     dd2:	2f 93       	push	r18
     dd4:	3f 93       	push	r19
     dd6:	4f 93       	push	r20
     dd8:	5f 93       	push	r21
     dda:	6f 93       	push	r22
     ddc:	7f 93       	push	r23
     dde:	8f 93       	push	r24
     de0:	9f 93       	push	r25
     de2:	af 93       	push	r26
     de4:	bf 93       	push	r27
     de6:	ef 93       	push	r30
     de8:	ff 93       	push	r31
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
	if(EEPROM_interrupt)
     df2:	80 91 f6 00 	lds	r24, 0x00F6
     df6:	90 91 f7 00 	lds	r25, 0x00F7
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	29 f0       	breq	.+10     	; 0xe08 <__vector_17+0x40>
		EEPROM_interrupt();
     dfe:	e0 91 f6 00 	lds	r30, 0x00F6
     e02:	f0 91 f7 00 	lds	r31, 0x00F7
     e06:	09 95       	icall
};
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	ff 91       	pop	r31
     e0e:	ef 91       	pop	r30
     e10:	bf 91       	pop	r27
     e12:	af 91       	pop	r26
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	7f 91       	pop	r23
     e1a:	6f 91       	pop	r22
     e1c:	5f 91       	pop	r21
     e1e:	4f 91       	pop	r20
     e20:	3f 91       	pop	r19
     e22:	2f 91       	pop	r18
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	1f 90       	pop	r1
     e2c:	18 95       	reti

00000e2e <UART_Init>:
const uint16_t BaudRateArray[TOTAL_SPEED_MODE][TOTAL_CPU_F][TOTAL_BAUD_RATE]=
		 {{{103, 51, 25, 16, 12,  8},{207,103, 51, 34, 25, 16},{416,207,103, 68 ,51, 34}},
		  {{207,103, 51, 34, 25, 16},{416,207,103, 68 ,51, 34},{832,416,207,138,103, 68}}};

void UART_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_Init+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	uint8  UCSRC_var=0;
     e3a:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t UBRR_var=0;
     e3c:	1a 82       	std	Y+2, r1	; 0x02
     e3e:	19 82       	std	Y+1, r1	; 0x01
/***************************** transmission speed***************************/
	#if (SPEED_MODE==NORMAL_SPEED)
	ClearBit(UCSRA,U2X);
     e40:	ab e2       	ldi	r26, 0x2B	; 43
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	eb e2       	ldi	r30, 0x2B	; 43
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8d 7f       	andi	r24, 0xFD	; 253
     e4c:	8c 93       	st	X, r24
	#elif (SPEED_MODE==DOUBLE_SPEED)
	SetBit(UCSRA,U2X);
	#endif

//******************set URSEL to write data to UCSRC register***************/
   SetBit(UCSRC_var,URSEL);
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	80 68       	ori	r24, 0x80	; 128
     e52:	8b 83       	std	Y+3, r24	; 0x03

//********************************synch***********************************/
	 #if (SYNCH_MODE==SYNCH)
	 SetBit(UCSRC_var,UMSEL)
	 #elif (SYNCH_MODE==ASYNCH)
 	 ClearBit(UCSRC_var,UMSEL);
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	8f 7b       	andi	r24, 0xBF	; 191
     e58:	8b 83       	std	Y+3, r24	; 0x03
	 #endif
 //*****************************parity mode*******************************/

	#if (PARITY_MODE==NO_PARITY)
	ClearBit(UCSRC_var,UPM0);
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	8f 7e       	andi	r24, 0xEF	; 239
     e5e:	8b 83       	std	Y+3, r24	; 0x03
	ClearBit(UCSRC_var,UPM1);
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	8f 7d       	andi	r24, 0xDF	; 223
     e64:	8b 83       	std	Y+3, r24	; 0x03
    #elif (N_DATA_BITS==_7_DATA_BITS)
    ClearBit(UCSRC_var,UCSZ0);
    SetBit(UCSRC_var,UCSZ1);
    ClearBit(UCSRB,UCSZ2);
	#elif (N_DATA_BITS==_8_DATA_BITS)
	SetBit(UCSRC_var,UCSZ0);
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	82 60       	ori	r24, 0x02	; 2
     e6a:	8b 83       	std	Y+3, r24	; 0x03
	SetBit(UCSRC_var,UCSZ1);
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	84 60       	ori	r24, 0x04	; 4
     e70:	8b 83       	std	Y+3, r24	; 0x03
	ClearBit(UCSRB,UCSZ2);
     e72:	aa e2       	ldi	r26, 0x2A	; 42
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	ea e2       	ldi	r30, 0x2A	; 42
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	8b 7f       	andi	r24, 0xFB	; 251
     e7e:	8c 93       	st	X, r24
	SetBit(UCSRC_var,UCSZ1);
	SetBit(UCSRB,UCSZ2);
	#endif
//************************Stop bits*******************************/
	#if (N_STOP_BITS==ONE_STOP_BIT)
	ClearBit(UCSRC_var,USBS);
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	87 7f       	andi	r24, 0xF7	; 247
     e84:	8b 83       	std	Y+3, r24	; 0x03
	#elif (N_STOP_BITS==TWO_STOP_BIT)
	SetBit(UCSRC_var,USBS);
	#endif
//*****************set UCSRC value   *******************************/
	UCSRC=UCSRC_var;
     e86:	e0 e4       	ldi	r30, 0x40	; 64
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	80 83       	st	Z, r24

//************************Baud rate *******************************/

    UBRR_var=BaudRateArray[SPEED_MODE][CPU_F][BUAD_RATE];
     e8e:	80 91 bc 00 	lds	r24, 0x00BC
     e92:	90 91 bd 00 	lds	r25, 0x00BD
     e96:	9a 83       	std	Y+2, r25	; 0x02
     e98:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (uint8)(UBRR_var>>8);
     e9a:	e0 e4       	ldi	r30, 0x40	; 64
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	89 2f       	mov	r24, r25
     ea4:	99 27       	eor	r25, r25
     ea6:	80 83       	st	Z, r24
	UBRRL = (uint8)UBRR_var;
     ea8:	e9 e2       	ldi	r30, 0x29	; 41
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	80 83       	st	Z, r24

//************************Enable  *******************************/
//enable UART  receiver.
SetBit(UCSRB,RXEN);
     eb0:	aa e2       	ldi	r26, 0x2A	; 42
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ea e2       	ldi	r30, 0x2A	; 42
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	80 61       	ori	r24, 0x10	; 16
     ebc:	8c 93       	st	X, r24
//enable UART  transmitter .
SetBit(UCSRB,TXEN);
     ebe:	aa e2       	ldi	r26, 0x2A	; 42
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	ea e2       	ldi	r30, 0x2A	; 42
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	88 60       	ori	r24, 0x08	; 8
     eca:	8c 93       	st	X, r24
}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <UART_RX_InterruptEnable>:

/*****************************************Interrupt functions*********************************************/


 void UART_RX_InterruptEnable(void)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	SetBit(UCSRB,RXCIE);
     ee0:	aa e2       	ldi	r26, 0x2A	; 42
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	ea e2       	ldi	r30, 0x2A	; 42
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	80 68       	ori	r24, 0x80	; 128
     eec:	8c 93       	st	X, r24
}
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <UART_RX_InterruptDisable>:

 void UART_RX_InterruptDisable(void)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
	ClearBit(UCSRB,RXCIE);
     efc:	aa e2       	ldi	r26, 0x2A	; 42
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ea e2       	ldi	r30, 0x2A	; 42
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	8f 77       	andi	r24, 0x7F	; 127
     f08:	8c 93       	st	X, r24
}
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <UART_TX_InterruptEnable>:

 void UART_TX_InterruptEnable(void)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
	SetBit(UCSRB,TXCIE);
     f18:	aa e2       	ldi	r26, 0x2A	; 42
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	ea e2       	ldi	r30, 0x2A	; 42
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	80 64       	ori	r24, 0x40	; 64
     f24:	8c 93       	st	X, r24
}
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <UART_TX_InterruptDisable>:

 void UART_TX_InterruptDisable(void)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
	ClearBit(UCSRB,TXCIE);
     f34:	aa e2       	ldi	r26, 0x2A	; 42
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ea e2       	ldi	r30, 0x2A	; 42
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8f 7b       	andi	r24, 0xBF	; 191
     f40:	8c 93       	st	X, r24
}
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <UART_RX_SetCallBack>:
/*****************************************Set Call Back Functions*********************************************/
 void UART_RX_SetCallBack(void (*LocalFptr)(void))
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <UART_RX_SetCallBack+0x6>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	9a 83       	std	Y+2, r25	; 0x02
     f54:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_Fptr = LocalFptr;
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	90 93 f9 00 	sts	0x00F9, r25
     f5e:	80 93 f8 00 	sts	0x00F8, r24
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <UART_TX_SetCallBack>:

 void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	00 d0       	rcall	.+0      	; 0xf72 <UART_TX_SetCallBack+0x6>
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	9a 83       	std	Y+2, r25	; 0x02
     f78:	89 83       	std	Y+1, r24	; 0x01
	UART_TX_Fptr = LocalFptr;
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	90 93 fb 00 	sts	0x00FB, r25
     f82:	80 93 fa 00 	sts	0x00FA, r24
}
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <__vector_13>:
/***********************************************ISR ************************************************************/
 ISR(USART_RXC_vect)
{
     f90:	1f 92       	push	r1
     f92:	0f 92       	push	r0
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	0f 92       	push	r0
     f98:	11 24       	eor	r1, r1
     f9a:	2f 93       	push	r18
     f9c:	3f 93       	push	r19
     f9e:	4f 93       	push	r20
     fa0:	5f 93       	push	r21
     fa2:	6f 93       	push	r22
     fa4:	7f 93       	push	r23
     fa6:	8f 93       	push	r24
     fa8:	9f 93       	push	r25
     faa:	af 93       	push	r26
     fac:	bf 93       	push	r27
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Fptr!=((void*)0))
     fba:	80 91 f8 00 	lds	r24, 0x00F8
     fbe:	90 91 f9 00 	lds	r25, 0x00F9
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	29 f0       	breq	.+10     	; 0xfd0 <__vector_13+0x40>
	{
		UART_RX_Fptr();
     fc6:	e0 91 f8 00 	lds	r30, 0x00F8
     fca:	f0 91 f9 00 	lds	r31, 0x00F9
     fce:	09 95       	icall
	}
}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	ff 91       	pop	r31
     fd6:	ef 91       	pop	r30
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <__vector_15>:

 ISR(USART_TXC_vect)
{
     ff6:	1f 92       	push	r1
     ff8:	0f 92       	push	r0
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	0f 92       	push	r0
     ffe:	11 24       	eor	r1, r1
    1000:	2f 93       	push	r18
    1002:	3f 93       	push	r19
    1004:	4f 93       	push	r20
    1006:	5f 93       	push	r21
    1008:	6f 93       	push	r22
    100a:	7f 93       	push	r23
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
    1010:	af 93       	push	r26
    1012:	bf 93       	push	r27
    1014:	ef 93       	push	r30
    1016:	ff 93       	push	r31
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
	if (UART_TX_Fptr!=((void*)0))
    1020:	80 91 fa 00 	lds	r24, 0x00FA
    1024:	90 91 fb 00 	lds	r25, 0x00FB
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	29 f0       	breq	.+10     	; 0x1036 <__vector_15+0x40>
	{
		UART_TX_Fptr();
    102c:	e0 91 fa 00 	lds	r30, 0x00FA
    1030:	f0 91 fb 00 	lds	r31, 0x00FB
    1034:	09 95       	icall
	}
}
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	bf 91       	pop	r27
    1040:	af 91       	pop	r26
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	7f 91       	pop	r23
    1048:	6f 91       	pop	r22
    104a:	5f 91       	pop	r21
    104c:	4f 91       	pop	r20
    104e:	3f 91       	pop	r19
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <UART_SendByteNoBlock>:


/****************************************Send and receive functions with no ckecking********************************/

void UART_SendByteNoBlock(uint8 data)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	0f 92       	push	r0
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    1068:	ec e2       	ldi	r30, 0x2C	; 44
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	80 83       	st	Z, r24
}
    1070:	0f 90       	pop	r0
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <UART_ReceiveByteNoBlock>:

uint8 UART_ReceiveByteNoBlock(void)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    return UDR;
    1080:	ec e2       	ldi	r30, 0x2C	; 44
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
}
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <UART_SendByte>:
/****************************************Send and receive functions with polling     ********************************/
void UART_SendByte(uint8 data)
{
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	0f 92       	push	r0
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE flag is set when the buffer is empty and ready
	for transmitting a new byte so wait until this flag is set to one
	and it will cleared by hardware when u write  new data to puffer.*/
	while(!(GetBit(UCSRA,UDRE)));
    1098:	eb e2       	ldi	r30, 0x2B	; 43
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	82 95       	swap	r24
    10a0:	86 95       	lsr	r24
    10a2:	87 70       	andi	r24, 0x07	; 7
    10a4:	88 2f       	mov	r24, r24
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	81 70       	andi	r24, 0x01	; 1
    10aa:	90 70       	andi	r25, 0x00	; 0
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	a1 f3       	breq	.-24     	; 0x1098 <UART_SendByte+0xc>
	UDR = data;
    10b0:	ec e2       	ldi	r30, 0x2C	; 44
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	80 83       	st	Z, r24
}
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <UART_ReceiveByte>:

uint8 UART_ReceiveByte(void)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
	/*RXC flag is set when the UART receive data so  wait until this flag is set to one
	and it will cleared by hardware when u read the data*/
	while(!(GetBit(UCSRA,RXC)));
    10c8:	eb e2       	ldi	r30, 0x2B	; 43
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	88 23       	and	r24, r24
    10d0:	dc f7       	brge	.-10     	; 0x10c8 <UART_ReceiveByte+0x8>
    return UDR;
    10d2:	ec e2       	ldi	r30, 0x2C	; 44
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
}
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <UART_Receive_NoBlock>:



uint8 UART_Receive_NoBlock(uint8*pdata)
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <UART_Receive_NoBlock+0x6>
    10e4:	0f 92       	push	r0
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	9b 83       	std	Y+3, r25	; 0x03
    10ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status=0;
    10ee:	19 82       	std	Y+1, r1	; 0x01
	if(GetBit(UCSRA,RXC))
    10f0:	eb e2       	ldi	r30, 0x2B	; 43
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 23       	and	r24, r24
    10f8:	4c f4       	brge	.+18     	; 0x110c <UART_Receive_NoBlock+0x2e>
	{
		*pdata=UDR;
    10fa:	ec e2       	ldi	r30, 0x2C	; 44
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	ea 81       	ldd	r30, Y+2	; 0x02
    1102:	fb 81       	ldd	r31, Y+3	; 0x03
    1104:	80 83       	st	Z, r24
		status=1;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	01 c0       	rjmp	.+2      	; 0x110e <UART_Receive_NoBlock+0x30>
	}
	else
	{
		status=0;
    110c:	19 82       	std	Y+1, r1	; 0x01
	}
return status;
    110e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <SPI_Init>:
#include "SPI.h"
void SPI_Init(SPI_Init_Types * Options)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <SPI_Init+0x6>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <SPI_Init+0x8>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <SPI_Init+0xa>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
	switch(Options->StateMode)
    112e:	e9 81       	ldd	r30, Y+1	; 0x01
    1130:	fa 81       	ldd	r31, Y+2	; 0x02
    1132:	80 81       	ld	r24, Z
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3e 83       	std	Y+6, r19	; 0x06
    113a:	2d 83       	std	Y+5, r18	; 0x05
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	9e 81       	ldd	r25, Y+6	; 0x06
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	01 f1       	breq	.+64     	; 0x1184 <SPI_Init+0x68>
    1144:	2d 81       	ldd	r18, Y+5	; 0x05
    1146:	3e 81       	ldd	r19, Y+6	; 0x06
    1148:	21 30       	cpi	r18, 0x01	; 1
    114a:	31 05       	cpc	r19, r1
    114c:	a9 f5       	brne	.+106    	; 0x11b8 <SPI_Init+0x9c>
	{
		case SPI_Master:
		DIO_ConfigChannel(SPI_SS_Pin,OUTPUT);
    114e:	8c e0       	ldi	r24, 0x0C	; 12
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MOSI_Pin,OUTPUT);
    1156:	8d e0       	ldi	r24, 0x0D	; 13
    1158:	61 e0       	ldi	r22, 0x01	; 1
    115a:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MISO_Pin,INPUT);
    115e:	8e e0       	ldi	r24, 0x0E	; 14
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_SCK_Pin,OUTPUT);
    1166:	8f e0       	ldi	r24, 0x0F	; 15
    1168:	61 e0       	ldi	r22, 0x01	; 1
    116a:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_ConfigChannel>
		SPI->SPCR_Register.Bits.MSTR_Bit = 1;
    116e:	ed e2       	ldi	r30, 0x2D	; 45
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	80 61       	ori	r24, 0x10	; 16
    1176:	80 83       	st	Z, r24
		SPI->SPCR_Register.Bits.SPE_Bit = 1;
    1178:	ed e2       	ldi	r30, 0x2D	; 45
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 64       	ori	r24, 0x40	; 64
    1180:	80 83       	st	Z, r24
    1182:	1a c0       	rjmp	.+52     	; 0x11b8 <SPI_Init+0x9c>
		break;
		case  SPI_Slave:
		DIO_ConfigChannel(SPI_SS_Pin,INPUT);
    1184:	8c e0       	ldi	r24, 0x0C	; 12
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MOSI_Pin,INPUT);
    118c:	8d e0       	ldi	r24, 0x0D	; 13
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MISO_Pin,OUTPUT);
    1194:	8e e0       	ldi	r24, 0x0E	; 14
    1196:	61 e0       	ldi	r22, 0x01	; 1
    1198:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_SCK_Pin,INPUT);
    119c:	8f e0       	ldi	r24, 0x0F	; 15
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_ConfigChannel>
		SPI->SPCR_Register.Bits.MSTR_Bit = 0;
    11a4:	ed e2       	ldi	r30, 0x2D	; 45
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	8f 7e       	andi	r24, 0xEF	; 239
    11ac:	80 83       	st	Z, r24
		SPI->SPCR_Register.Bits.SPE_Bit = 1;
    11ae:	ed e2       	ldi	r30, 0x2D	; 45
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	80 64       	ori	r24, 0x40	; 64
    11b6:	80 83       	st	Z, r24
		break;
	}
	switch(Options->DoubleSpeedMode)
    11b8:	e9 81       	ldd	r30, Y+1	; 0x01
    11ba:	fa 81       	ldd	r31, Y+2	; 0x02
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	3c 83       	std	Y+4, r19	; 0x04
    11c4:	2b 83       	std	Y+3, r18	; 0x03
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	59 f0       	breq	.+22     	; 0x11e4 <SPI_Init+0xc8>
    11ce:	2b 81       	ldd	r18, Y+3	; 0x03
    11d0:	3c 81       	ldd	r19, Y+4	; 0x04
    11d2:	21 30       	cpi	r18, 0x01	; 1
    11d4:	31 05       	cpc	r19, r1
    11d6:	59 f4       	brne	.+22     	; 0x11ee <SPI_Init+0xd2>
	{
		case SPI_DoubleSpeed_Enable:SPI->SPSR_Register.Bits.SPI2X_Bit = 1;break;
    11d8:	ed e2       	ldi	r30, 0x2D	; 45
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	81 81       	ldd	r24, Z+1	; 0x01
    11de:	81 60       	ori	r24, 0x01	; 1
    11e0:	81 83       	std	Z+1, r24	; 0x01
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <SPI_Init+0xd2>
		case SPI_DoubleSpeed_Disable:SPI->SPSR_Register.Bits.SPI2X_Bit = 0;break;
    11e4:	ed e2       	ldi	r30, 0x2D	; 45
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	81 81       	ldd	r24, Z+1	; 0x01
    11ea:	8e 7f       	andi	r24, 0xFE	; 254
    11ec:	81 83       	std	Z+1, r24	; 0x01
	}
	SPI->SPCR_Register.AllRegister |= (Options->ClockMode<<0);
    11ee:	ad e2       	ldi	r26, 0x2D	; 45
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ed e2       	ldi	r30, 0x2D	; 45
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	90 81       	ld	r25, Z
    11f8:	e9 81       	ldd	r30, Y+1	; 0x01
    11fa:	fa 81       	ldd	r31, Y+2	; 0x02
    11fc:	81 81       	ldd	r24, Z+1	; 0x01
    11fe:	89 2b       	or	r24, r25
    1200:	8c 93       	st	X, r24
	SPI->SPCR_Register.AllRegister |= (Options->MODE<<2);
    1202:	ad e2       	ldi	r26, 0x2D	; 45
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	ed e2       	ldi	r30, 0x2D	; 45
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	28 2f       	mov	r18, r24
    120e:	e9 81       	ldd	r30, Y+1	; 0x01
    1210:	fa 81       	ldd	r31, Y+2	; 0x02
    1212:	85 81       	ldd	r24, Z+5	; 0x05
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	82 2b       	or	r24, r18
    1222:	8c 93       	st	X, r24
	SPI->SPCR_Register.AllRegister |= (Options->DataOrderMode<<5);
    1224:	ad e2       	ldi	r26, 0x2D	; 45
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	ed e2       	ldi	r30, 0x2D	; 45
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	28 2f       	mov	r18, r24
    1230:	e9 81       	ldd	r30, Y+1	; 0x01
    1232:	fa 81       	ldd	r31, Y+2	; 0x02
    1234:	83 81       	ldd	r24, Z+3	; 0x03
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	82 95       	swap	r24
    1240:	92 95       	swap	r25
    1242:	90 7f       	andi	r25, 0xF0	; 240
    1244:	98 27       	eor	r25, r24
    1246:	80 7f       	andi	r24, 0xF0	; 240
    1248:	98 27       	eor	r25, r24
    124a:	82 2b       	or	r24, r18
    124c:	8c 93       	st	X, r24
	SPI->SPCR_Register.AllRegister |= (Options->InterruptState<<7);
    124e:	ad e2       	ldi	r26, 0x2D	; 45
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ed e2       	ldi	r30, 0x2D	; 45
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	28 2f       	mov	r18, r24
    125a:	e9 81       	ldd	r30, Y+1	; 0x01
    125c:	fa 81       	ldd	r31, Y+2	; 0x02
    125e:	84 81       	ldd	r24, Z+4	; 0x04
    1260:	88 2f       	mov	r24, r24
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	96 95       	lsr	r25
    1266:	98 2f       	mov	r25, r24
    1268:	88 27       	eor	r24, r24
    126a:	97 95       	ror	r25
    126c:	87 95       	ror	r24
    126e:	82 2b       	or	r24, r18
    1270:	8c 93       	st	X, r24
}
    1272:	26 96       	adiw	r28, 0x06	; 6
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <SPI_TX_RX>:
U8 SPI_TX_RX(U8 Data)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	0f 92       	push	r0
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	89 83       	std	Y+1, r24	; 0x01
	SPI->SPDR_Register = Data;
    1290:	ed e2       	ldi	r30, 0x2D	; 45
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	82 83       	std	Z+2, r24	; 0x02
	while (SPI->SPSR_Register.Bits.SPIF_Bit == 0);
    1298:	ed e2       	ldi	r30, 0x2D	; 45
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	81 81       	ldd	r24, Z+1	; 0x01
    129e:	80 78       	andi	r24, 0x80	; 128
    12a0:	88 23       	and	r24, r24
    12a2:	d1 f3       	breq	.-12     	; 0x1298 <SPI_TX_RX+0x14>
	return SPI->SPDR_Register;
    12a4:	ed e2       	ldi	r30, 0x2D	; 45
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	82 81       	ldd	r24, Z+2	; 0x02
}
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <SPI_TX_RX_String>:
void SPI_TX_RX_String(S8 *String)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <SPI_TX_RX_String+0x6>
    12b8:	0f 92       	push	r0
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	9b 83       	std	Y+3, r25	; 0x03
    12c0:	8a 83       	std	Y+2, r24	; 0x02
	U8 i;
	for(i=0; String[i]!='\0';i++)
    12c2:	19 82       	std	Y+1, r1	; 0x01
    12c4:	0e c0       	rjmp	.+28     	; 0x12e2 <SPI_TX_RX_String+0x30>
	{
		SPI_TX_RX(String[i]);
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	9b 81       	ldd	r25, Y+3	; 0x03
    12d0:	fc 01       	movw	r30, r24
    12d2:	e2 0f       	add	r30, r18
    12d4:	f3 1f       	adc	r31, r19
    12d6:	80 81       	ld	r24, Z
    12d8:	0e 94 42 09 	call	0x1284	; 0x1284 <SPI_TX_RX>
	return SPI->SPDR_Register;
}
void SPI_TX_RX_String(S8 *String)
{
	U8 i;
	for(i=0; String[i]!='\0';i++)
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	9b 81       	ldd	r25, Y+3	; 0x03
    12ec:	fc 01       	movw	r30, r24
    12ee:	e2 0f       	add	r30, r18
    12f0:	f3 1f       	adc	r31, r19
    12f2:	80 81       	ld	r24, Z
    12f4:	88 23       	and	r24, r24
    12f6:	39 f7       	brne	.-50     	; 0x12c6 <SPI_TX_RX_String+0x14>
	{
		SPI_TX_RX(String[i]);
	}
}
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <SPI_Cannel_State>:

void SPI_Cannel_State(DIO_ChannelTypes ChannelID,SPI_State State)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	00 d0       	rcall	.+0      	; 0x130a <SPI_Cannel_State+0x6>
    130a:	00 d0       	rcall	.+0      	; 0x130c <SPI_Cannel_State+0x8>
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	6a 83       	std	Y+2, r22	; 0x02
	DIO_ConfigChannel(ChannelID,OUTPUT);
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	61 e0       	ldi	r22, 0x01	; 1
    1318:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_ConfigChannel>
	switch (State)
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	3c 83       	std	Y+4, r19	; 0x04
    1324:	2b 83       	std	Y+3, r18	; 0x03
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	31 f0       	breq	.+12     	; 0x133a <SPI_Cannel_State+0x36>
    132e:	2b 81       	ldd	r18, Y+3	; 0x03
    1330:	3c 81       	ldd	r19, Y+4	; 0x04
    1332:	21 30       	cpi	r18, 0x01	; 1
    1334:	31 05       	cpc	r19, r1
    1336:	31 f0       	breq	.+12     	; 0x1344 <SPI_Cannel_State+0x40>
    1338:	09 c0       	rjmp	.+18     	; 0x134c <SPI_Cannel_State+0x48>
	{
		case SPI_Disable:DIO_WriteChannel(ChannelID,STD_High);break;
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
    1342:	04 c0       	rjmp	.+8      	; 0x134c <SPI_Cannel_State+0x48>
		case SPI_Enable:DIO_WriteChannel(ChannelID,STD_Low);break;
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
	}
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <DIO_WriteChannel>:
#include "DIO.h"
void DIO_WriteChannel(DIO_ChannelTypes ChannelID , STD_LevelTypes Level)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	2a 97       	sbiw	r28, 0x0a	; 10
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	8b 83       	std	Y+3, r24	; 0x03
    1370:	6c 83       	std	Y+4, r22	; 0x04
	DIO_PortTypes PortX = ChannelID/8;
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	86 95       	lsr	r24
    1376:	86 95       	lsr	r24
    1378:	86 95       	lsr	r24
    137a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ChannelTypes BitNo = ChannelID%8;
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	87 70       	andi	r24, 0x07	; 7
    1380:	89 83       	std	Y+1, r24	; 0x01
	switch(Level){
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	3a 87       	std	Y+10, r19	; 0x0a
    138a:	29 87       	std	Y+9, r18	; 0x09
    138c:	89 85       	ldd	r24, Y+9	; 0x09
    138e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	09 f4       	brne	.+2      	; 0x1396 <DIO_WriteChannel+0x3c>
    1394:	75 c0       	rjmp	.+234    	; 0x1480 <DIO_WriteChannel+0x126>
    1396:	29 85       	ldd	r18, Y+9	; 0x09
    1398:	3a 85       	ldd	r19, Y+10	; 0x0a
    139a:	21 30       	cpi	r18, 0x01	; 1
    139c:	31 05       	cpc	r19, r1
    139e:	09 f0       	breq	.+2      	; 0x13a2 <DIO_WriteChannel+0x48>
    13a0:	e2 c0       	rjmp	.+452    	; 0x1566 <DIO_WriteChannel+0x20c>
		case STD_High:
		switch(PortX){
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	38 87       	std	Y+8, r19	; 0x08
    13aa:	2f 83       	std	Y+7, r18	; 0x07
    13ac:	8f 81       	ldd	r24, Y+7	; 0x07
    13ae:	98 85       	ldd	r25, Y+8	; 0x08
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	49 f1       	breq	.+82     	; 0x1408 <DIO_WriteChannel+0xae>
    13b6:	2f 81       	ldd	r18, Y+7	; 0x07
    13b8:	38 85       	ldd	r19, Y+8	; 0x08
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	2c f4       	brge	.+10     	; 0x13ca <DIO_WriteChannel+0x70>
    13c0:	8f 81       	ldd	r24, Y+7	; 0x07
    13c2:	98 85       	ldd	r25, Y+8	; 0x08
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <DIO_WriteChannel+0x86>
    13c8:	ce c0       	rjmp	.+412    	; 0x1566 <DIO_WriteChannel+0x20c>
    13ca:	2f 81       	ldd	r18, Y+7	; 0x07
    13cc:	38 85       	ldd	r19, Y+8	; 0x08
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	71 f1       	breq	.+92     	; 0x1430 <DIO_WriteChannel+0xd6>
    13d4:	8f 81       	ldd	r24, Y+7	; 0x07
    13d6:	98 85       	ldd	r25, Y+8	; 0x08
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	91 05       	cpc	r25, r1
    13dc:	e9 f1       	breq	.+122    	; 0x1458 <DIO_WriteChannel+0xfe>
    13de:	c3 c0       	rjmp	.+390    	; 0x1566 <DIO_WriteChannel+0x20c>
			case DIO_PortA:SetBit(PORTA_Register,BitNo);break;
    13e0:	ab e3       	ldi	r26, 0x3B	; 59
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	eb e3       	ldi	r30, 0x3B	; 59
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_WriteChannel+0xa4>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_WriteChannel+0xa0>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	af c0       	rjmp	.+350    	; 0x1566 <DIO_WriteChannel+0x20c>
			case DIO_PortB:SetBit(PORTB_Register,BitNo);break;
    1408:	a8 e3       	ldi	r26, 0x38	; 56
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e8 e3       	ldi	r30, 0x38	; 56
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_WriteChannel+0xcc>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_WriteChannel+0xc8>
    142a:	84 2b       	or	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	9b c0       	rjmp	.+310    	; 0x1566 <DIO_WriteChannel+0x20c>
			case DIO_PortC:SetBit(PORTC_Register,BitNo);break;
    1430:	a5 e3       	ldi	r26, 0x35	; 53
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e5 e3       	ldi	r30, 0x35	; 53
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DIO_WriteChannel+0xf4>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DIO_WriteChannel+0xf0>
    1452:	84 2b       	or	r24, r20
    1454:	8c 93       	st	X, r24
    1456:	87 c0       	rjmp	.+270    	; 0x1566 <DIO_WriteChannel+0x20c>
			case DIO_PortD:SetBit(PORTD_Register,BitNo);break;
    1458:	a2 e3       	ldi	r26, 0x32	; 50
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e2 e3       	ldi	r30, 0x32	; 50
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_WriteChannel+0x11c>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_WriteChannel+0x118>
    147a:	84 2b       	or	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	73 c0       	rjmp	.+230    	; 0x1566 <DIO_WriteChannel+0x20c>
		}break;
		case STD_Low:
		switch(PortX){
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	3e 83       	std	Y+6, r19	; 0x06
    1488:	2d 83       	std	Y+5, r18	; 0x05
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	91 05       	cpc	r25, r1
    1492:	59 f1       	breq	.+86     	; 0x14ea <DIO_WriteChannel+0x190>
    1494:	2d 81       	ldd	r18, Y+5	; 0x05
    1496:	3e 81       	ldd	r19, Y+6	; 0x06
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	2c f4       	brge	.+10     	; 0x14a8 <DIO_WriteChannel+0x14e>
    149e:	8d 81       	ldd	r24, Y+5	; 0x05
    14a0:	9e 81       	ldd	r25, Y+6	; 0x06
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	69 f0       	breq	.+26     	; 0x14c0 <DIO_WriteChannel+0x166>
    14a6:	5f c0       	rjmp	.+190    	; 0x1566 <DIO_WriteChannel+0x20c>
    14a8:	2d 81       	ldd	r18, Y+5	; 0x05
    14aa:	3e 81       	ldd	r19, Y+6	; 0x06
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	89 f1       	breq	.+98     	; 0x1514 <DIO_WriteChannel+0x1ba>
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	83 30       	cpi	r24, 0x03	; 3
    14b8:	91 05       	cpc	r25, r1
    14ba:	09 f4       	brne	.+2      	; 0x14be <DIO_WriteChannel+0x164>
    14bc:	40 c0       	rjmp	.+128    	; 0x153e <DIO_WriteChannel+0x1e4>
    14be:	53 c0       	rjmp	.+166    	; 0x1566 <DIO_WriteChannel+0x20c>
			case DIO_PortA:ClearBit(PORTA_Register,BitNo);break;
    14c0:	ab e3       	ldi	r26, 0x3B	; 59
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	eb e3       	ldi	r30, 0x3B	; 59
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <DIO_WriteChannel+0x184>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <DIO_WriteChannel+0x180>
    14e2:	80 95       	com	r24
    14e4:	84 23       	and	r24, r20
    14e6:	8c 93       	st	X, r24
    14e8:	3e c0       	rjmp	.+124    	; 0x1566 <DIO_WriteChannel+0x20c>
			case DIO_PortB:ClearBit(PORTB_Register,BitNo);break;
    14ea:	a8 e3       	ldi	r26, 0x38	; 56
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e8 e3       	ldi	r30, 0x38	; 56
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_WriteChannel+0x1ae>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <DIO_WriteChannel+0x1aa>
    150c:	80 95       	com	r24
    150e:	84 23       	and	r24, r20
    1510:	8c 93       	st	X, r24
    1512:	29 c0       	rjmp	.+82     	; 0x1566 <DIO_WriteChannel+0x20c>
			case DIO_PortC:ClearBit(PORTC_Register,BitNo);break;
    1514:	a5 e3       	ldi	r26, 0x35	; 53
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e5 e3       	ldi	r30, 0x35	; 53
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <DIO_WriteChannel+0x1d8>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <DIO_WriteChannel+0x1d4>
    1536:	80 95       	com	r24
    1538:	84 23       	and	r24, r20
    153a:	8c 93       	st	X, r24
    153c:	14 c0       	rjmp	.+40     	; 0x1566 <DIO_WriteChannel+0x20c>
			case DIO_PortD:ClearBit(PORTD_Register,BitNo);break;
    153e:	a2 e3       	ldi	r26, 0x32	; 50
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e2 e3       	ldi	r30, 0x32	; 50
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <DIO_WriteChannel+0x202>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <DIO_WriteChannel+0x1fe>
    1560:	80 95       	com	r24
    1562:	84 23       	and	r24, r20
    1564:	8c 93       	st	X, r24
		}break;
	}
}
    1566:	2a 96       	adiw	r28, 0x0a	; 10
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <DIO_ReadChannel>:

STD_LevelTypes DIO_ReadChannel(DIO_ChannelTypes ChannelID)
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	00 d0       	rcall	.+0      	; 0x157e <DIO_ReadChannel+0x6>
    157e:	00 d0       	rcall	.+0      	; 0x1580 <DIO_ReadChannel+0x8>
    1580:	00 d0       	rcall	.+0      	; 0x1582 <DIO_ReadChannel+0xa>
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	8c 83       	std	Y+4, r24	; 0x04
	DIO_PortTypes PortX = ChannelID/8;
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	86 95       	lsr	r24
    158c:	86 95       	lsr	r24
    158e:	86 95       	lsr	r24
    1590:	8b 83       	std	Y+3, r24	; 0x03
	DIO_ChannelTypes BitNo = ChannelID%8;
    1592:	8c 81       	ldd	r24, Y+4	; 0x04
    1594:	87 70       	andi	r24, 0x07	; 7
    1596:	8a 83       	std	Y+2, r24	; 0x02
	STD_LevelTypes BitValue = STD_Low;
    1598:	19 82       	std	Y+1, r1	; 0x01
	switch(PortX){
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	3e 83       	std	Y+6, r19	; 0x06
    15a2:	2d 83       	std	Y+5, r18	; 0x05
    15a4:	4d 81       	ldd	r20, Y+5	; 0x05
    15a6:	5e 81       	ldd	r21, Y+6	; 0x06
    15a8:	41 30       	cpi	r20, 0x01	; 1
    15aa:	51 05       	cpc	r21, r1
    15ac:	41 f1       	breq	.+80     	; 0x15fe <DIO_ReadChannel+0x86>
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	82 30       	cpi	r24, 0x02	; 2
    15b4:	91 05       	cpc	r25, r1
    15b6:	34 f4       	brge	.+12     	; 0x15c4 <DIO_ReadChannel+0x4c>
    15b8:	2d 81       	ldd	r18, Y+5	; 0x05
    15ba:	3e 81       	ldd	r19, Y+6	; 0x06
    15bc:	21 15       	cp	r18, r1
    15be:	31 05       	cpc	r19, r1
    15c0:	61 f0       	breq	.+24     	; 0x15da <DIO_ReadChannel+0x62>
    15c2:	52 c0       	rjmp	.+164    	; 0x1668 <DIO_ReadChannel+0xf0>
    15c4:	4d 81       	ldd	r20, Y+5	; 0x05
    15c6:	5e 81       	ldd	r21, Y+6	; 0x06
    15c8:	42 30       	cpi	r20, 0x02	; 2
    15ca:	51 05       	cpc	r21, r1
    15cc:	51 f1       	breq	.+84     	; 0x1622 <DIO_ReadChannel+0xaa>
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	83 30       	cpi	r24, 0x03	; 3
    15d4:	91 05       	cpc	r25, r1
    15d6:	b9 f1       	breq	.+110    	; 0x1646 <DIO_ReadChannel+0xce>
    15d8:	47 c0       	rjmp	.+142    	; 0x1668 <DIO_ReadChannel+0xf0>
		case DIO_PortA:BitValue = GetBit(PINA_Register,BitNo);break;
    15da:	e9 e3       	ldi	r30, 0x39	; 57
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a9 01       	movw	r20, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_ReadChannel+0x7a>
    15ee:	55 95       	asr	r21
    15f0:	47 95       	ror	r20
    15f2:	8a 95       	dec	r24
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_ReadChannel+0x76>
    15f6:	ca 01       	movw	r24, r20
    15f8:	81 70       	andi	r24, 0x01	; 1
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	35 c0       	rjmp	.+106    	; 0x1668 <DIO_ReadChannel+0xf0>
		case DIO_PortB:BitValue = GetBit(PINB_Register,BitNo);break;
    15fe:	e6 e3       	ldi	r30, 0x36	; 54
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a9 01       	movw	r20, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_ReadChannel+0x9e>
    1612:	55 95       	asr	r21
    1614:	47 95       	ror	r20
    1616:	8a 95       	dec	r24
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <DIO_ReadChannel+0x9a>
    161a:	ca 01       	movw	r24, r20
    161c:	81 70       	andi	r24, 0x01	; 1
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	23 c0       	rjmp	.+70     	; 0x1668 <DIO_ReadChannel+0xf0>
		case DIO_PortC:BitValue = GetBit(PINC_Register,BitNo);break;
    1622:	e3 e3       	ldi	r30, 0x33	; 51
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	a9 01       	movw	r20, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <DIO_ReadChannel+0xc2>
    1636:	55 95       	asr	r21
    1638:	47 95       	ror	r20
    163a:	8a 95       	dec	r24
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <DIO_ReadChannel+0xbe>
    163e:	ca 01       	movw	r24, r20
    1640:	81 70       	andi	r24, 0x01	; 1
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	11 c0       	rjmp	.+34     	; 0x1668 <DIO_ReadChannel+0xf0>
		case DIO_PortD:BitValue = GetBit(PIND_Register,BitNo);break;
    1646:	e0 e3       	ldi	r30, 0x30	; 48
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a9 01       	movw	r20, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DIO_ReadChannel+0xe6>
    165a:	55 95       	asr	r21
    165c:	47 95       	ror	r20
    165e:	8a 95       	dec	r24
    1660:	e2 f7       	brpl	.-8      	; 0x165a <DIO_ReadChannel+0xe2>
    1662:	ca 01       	movw	r24, r20
    1664:	81 70       	andi	r24, 0x01	; 1
    1666:	89 83       	std	Y+1, r24	; 0x01
	};
	return BitValue;
    1668:	89 81       	ldd	r24, Y+1	; 0x01
}
    166a:	26 96       	adiw	r28, 0x06	; 6
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <DIO_ConfigChannel>:

void DIO_ConfigChannel(DIO_ChannelTypes ChannelID , DIO_DirectionTypes Direction)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	2a 97       	sbiw	r28, 0x0a	; 10
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	8b 83       	std	Y+3, r24	; 0x03
    1692:	6c 83       	std	Y+4, r22	; 0x04
	DIO_PortTypes PortX = ChannelID/8;
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	86 95       	lsr	r24
    1698:	86 95       	lsr	r24
    169a:	86 95       	lsr	r24
    169c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ChannelTypes BitNo = ChannelID%8;
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	87 70       	andi	r24, 0x07	; 7
    16a2:	89 83       	std	Y+1, r24	; 0x01
	switch(Direction)
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	3a 87       	std	Y+10, r19	; 0x0a
    16ac:	29 87       	std	Y+9, r18	; 0x09
    16ae:	89 85       	ldd	r24, Y+9	; 0x09
    16b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	39 f0       	breq	.+14     	; 0x16c4 <DIO_ConfigChannel+0x48>
    16b6:	29 85       	ldd	r18, Y+9	; 0x09
    16b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ba:	21 30       	cpi	r18, 0x01	; 1
    16bc:	31 05       	cpc	r19, r1
    16be:	09 f4       	brne	.+2      	; 0x16c2 <DIO_ConfigChannel+0x46>
    16c0:	75 c0       	rjmp	.+234    	; 0x17ac <DIO_ConfigChannel+0x130>
    16c2:	e2 c0       	rjmp	.+452    	; 0x1888 <DIO_ConfigChannel+0x20c>
	{
		case INPUT:
		switch(PortX){
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	38 87       	std	Y+8, r19	; 0x08
    16cc:	2f 83       	std	Y+7, r18	; 0x07
    16ce:	8f 81       	ldd	r24, Y+7	; 0x07
    16d0:	98 85       	ldd	r25, Y+8	; 0x08
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	91 05       	cpc	r25, r1
    16d6:	59 f1       	breq	.+86     	; 0x172e <DIO_ConfigChannel+0xb2>
    16d8:	2f 81       	ldd	r18, Y+7	; 0x07
    16da:	38 85       	ldd	r19, Y+8	; 0x08
    16dc:	22 30       	cpi	r18, 0x02	; 2
    16de:	31 05       	cpc	r19, r1
    16e0:	2c f4       	brge	.+10     	; 0x16ec <DIO_ConfigChannel+0x70>
    16e2:	8f 81       	ldd	r24, Y+7	; 0x07
    16e4:	98 85       	ldd	r25, Y+8	; 0x08
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	69 f0       	breq	.+26     	; 0x1704 <DIO_ConfigChannel+0x88>
    16ea:	ce c0       	rjmp	.+412    	; 0x1888 <DIO_ConfigChannel+0x20c>
    16ec:	2f 81       	ldd	r18, Y+7	; 0x07
    16ee:	38 85       	ldd	r19, Y+8	; 0x08
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	89 f1       	breq	.+98     	; 0x1758 <DIO_ConfigChannel+0xdc>
    16f6:	8f 81       	ldd	r24, Y+7	; 0x07
    16f8:	98 85       	ldd	r25, Y+8	; 0x08
    16fa:	83 30       	cpi	r24, 0x03	; 3
    16fc:	91 05       	cpc	r25, r1
    16fe:	09 f4       	brne	.+2      	; 0x1702 <DIO_ConfigChannel+0x86>
    1700:	40 c0       	rjmp	.+128    	; 0x1782 <DIO_ConfigChannel+0x106>
    1702:	c2 c0       	rjmp	.+388    	; 0x1888 <DIO_ConfigChannel+0x20c>
			case DIO_PortA:ClearBit(DDRA_Register,BitNo);break;
    1704:	aa e3       	ldi	r26, 0x3A	; 58
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	ea e3       	ldi	r30, 0x3A	; 58
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <DIO_ConfigChannel+0xa6>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <DIO_ConfigChannel+0xa2>
    1726:	80 95       	com	r24
    1728:	84 23       	and	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	ad c0       	rjmp	.+346    	; 0x1888 <DIO_ConfigChannel+0x20c>
			case DIO_PortB:ClearBit(DDRB_Register,BitNo);break;
    172e:	a7 e3       	ldi	r26, 0x37	; 55
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e7 e3       	ldi	r30, 0x37	; 55
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	48 2f       	mov	r20, r24
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 2e       	mov	r0, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_ConfigChannel+0xd0>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_ConfigChannel+0xcc>
    1750:	80 95       	com	r24
    1752:	84 23       	and	r24, r20
    1754:	8c 93       	st	X, r24
    1756:	98 c0       	rjmp	.+304    	; 0x1888 <DIO_ConfigChannel+0x20c>
			case DIO_PortC:ClearBit(DDRC_Register,BitNo);break;
    1758:	a4 e3       	ldi	r26, 0x34	; 52
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e4 e3       	ldi	r30, 0x34	; 52
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <DIO_ConfigChannel+0xfa>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <DIO_ConfigChannel+0xf6>
    177a:	80 95       	com	r24
    177c:	84 23       	and	r24, r20
    177e:	8c 93       	st	X, r24
    1780:	83 c0       	rjmp	.+262    	; 0x1888 <DIO_ConfigChannel+0x20c>
			case DIO_PortD:ClearBit(DDRD_Register,BitNo);break;
    1782:	a1 e3       	ldi	r26, 0x31	; 49
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e1 e3       	ldi	r30, 0x31	; 49
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <DIO_ConfigChannel+0x124>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <DIO_ConfigChannel+0x120>
    17a4:	80 95       	com	r24
    17a6:	84 23       	and	r24, r20
    17a8:	8c 93       	st	X, r24
    17aa:	6e c0       	rjmp	.+220    	; 0x1888 <DIO_ConfigChannel+0x20c>
		}break;
		case OUTPUT:
		switch(PortX){
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	3e 83       	std	Y+6, r19	; 0x06
    17b4:	2d 83       	std	Y+5, r18	; 0x05
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	91 05       	cpc	r25, r1
    17be:	49 f1       	breq	.+82     	; 0x1812 <DIO_ConfigChannel+0x196>
    17c0:	2d 81       	ldd	r18, Y+5	; 0x05
    17c2:	3e 81       	ldd	r19, Y+6	; 0x06
    17c4:	22 30       	cpi	r18, 0x02	; 2
    17c6:	31 05       	cpc	r19, r1
    17c8:	2c f4       	brge	.+10     	; 0x17d4 <DIO_ConfigChannel+0x158>
    17ca:	8d 81       	ldd	r24, Y+5	; 0x05
    17cc:	9e 81       	ldd	r25, Y+6	; 0x06
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	61 f0       	breq	.+24     	; 0x17ea <DIO_ConfigChannel+0x16e>
    17d2:	5a c0       	rjmp	.+180    	; 0x1888 <DIO_ConfigChannel+0x20c>
    17d4:	2d 81       	ldd	r18, Y+5	; 0x05
    17d6:	3e 81       	ldd	r19, Y+6	; 0x06
    17d8:	22 30       	cpi	r18, 0x02	; 2
    17da:	31 05       	cpc	r19, r1
    17dc:	71 f1       	breq	.+92     	; 0x183a <DIO_ConfigChannel+0x1be>
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	83 30       	cpi	r24, 0x03	; 3
    17e4:	91 05       	cpc	r25, r1
    17e6:	e9 f1       	breq	.+122    	; 0x1862 <DIO_ConfigChannel+0x1e6>
    17e8:	4f c0       	rjmp	.+158    	; 0x1888 <DIO_ConfigChannel+0x20c>
			case DIO_PortA:SetBit(DDRA_Register,BitNo);break;
    17ea:	aa e3       	ldi	r26, 0x3A	; 58
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	ea e3       	ldi	r30, 0x3A	; 58
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	48 2f       	mov	r20, r24
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 2e       	mov	r0, r18
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <DIO_ConfigChannel+0x18c>
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	0a 94       	dec	r0
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <DIO_ConfigChannel+0x188>
    180c:	84 2b       	or	r24, r20
    180e:	8c 93       	st	X, r24
    1810:	3b c0       	rjmp	.+118    	; 0x1888 <DIO_ConfigChannel+0x20c>
			case DIO_PortB:SetBit(DDRB_Register,BitNo);break;
    1812:	a7 e3       	ldi	r26, 0x37	; 55
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e7 e3       	ldi	r30, 0x37	; 55
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_ConfigChannel+0x1b4>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <DIO_ConfigChannel+0x1b0>
    1834:	84 2b       	or	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	27 c0       	rjmp	.+78     	; 0x1888 <DIO_ConfigChannel+0x20c>
			case DIO_PortC:SetBit(DDRC_Register,BitNo);break;
    183a:	a4 e3       	ldi	r26, 0x34	; 52
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e4 e3       	ldi	r30, 0x34	; 52
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	48 2f       	mov	r20, r24
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <DIO_ConfigChannel+0x1dc>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <DIO_ConfigChannel+0x1d8>
    185c:	84 2b       	or	r24, r20
    185e:	8c 93       	st	X, r24
    1860:	13 c0       	rjmp	.+38     	; 0x1888 <DIO_ConfigChannel+0x20c>
			case DIO_PortD:SetBit(DDRD_Register,BitNo);break;
    1862:	a1 e3       	ldi	r26, 0x31	; 49
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e1 e3       	ldi	r30, 0x31	; 49
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_ConfigChannel+0x204>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_ConfigChannel+0x200>
    1884:	84 2b       	or	r24, r20
    1886:	8c 93       	st	X, r24
		}break;
	}
}
    1888:	2a 96       	adiw	r28, 0x0a	; 10
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <DIO_ToggleChannel>:


void DIO_ToggleChannel(DIO_ChannelTypes ChannelID)
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <DIO_ToggleChannel+0x6>
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <DIO_ToggleChannel+0x8>
    18a2:	0f 92       	push	r0
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	8b 83       	std	Y+3, r24	; 0x03
	DIO_PortTypes PortX = ChannelID/8;
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	86 95       	lsr	r24
    18ae:	86 95       	lsr	r24
    18b0:	86 95       	lsr	r24
    18b2:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ChannelTypes BitNo = ChannelID%8;
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	87 70       	andi	r24, 0x07	; 7
    18b8:	89 83       	std	Y+1, r24	; 0x01
	switch(PortX){
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	3d 83       	std	Y+5, r19	; 0x05
    18c2:	2c 83       	std	Y+4, r18	; 0x04
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	9d 81       	ldd	r25, Y+5	; 0x05
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	91 05       	cpc	r25, r1
    18cc:	49 f1       	breq	.+82     	; 0x1920 <DIO_ToggleChannel+0x86>
    18ce:	2c 81       	ldd	r18, Y+4	; 0x04
    18d0:	3d 81       	ldd	r19, Y+5	; 0x05
    18d2:	22 30       	cpi	r18, 0x02	; 2
    18d4:	31 05       	cpc	r19, r1
    18d6:	2c f4       	brge	.+10     	; 0x18e2 <DIO_ToggleChannel+0x48>
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	9d 81       	ldd	r25, Y+5	; 0x05
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	61 f0       	breq	.+24     	; 0x18f8 <DIO_ToggleChannel+0x5e>
    18e0:	5a c0       	rjmp	.+180    	; 0x1996 <DIO_ToggleChannel+0xfc>
    18e2:	2c 81       	ldd	r18, Y+4	; 0x04
    18e4:	3d 81       	ldd	r19, Y+5	; 0x05
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	31 05       	cpc	r19, r1
    18ea:	71 f1       	breq	.+92     	; 0x1948 <DIO_ToggleChannel+0xae>
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	83 30       	cpi	r24, 0x03	; 3
    18f2:	91 05       	cpc	r25, r1
    18f4:	e9 f1       	breq	.+122    	; 0x1970 <DIO_ToggleChannel+0xd6>
    18f6:	4f c0       	rjmp	.+158    	; 0x1996 <DIO_ToggleChannel+0xfc>
		case DIO_PortA:ToggleBit(PORTA_Register,BitNo);break;
    18f8:	ab e3       	ldi	r26, 0x3B	; 59
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	eb e3       	ldi	r30, 0x3B	; 59
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_ToggleChannel+0x7c>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_ToggleChannel+0x78>
    191a:	84 27       	eor	r24, r20
    191c:	8c 93       	st	X, r24
    191e:	3b c0       	rjmp	.+118    	; 0x1996 <DIO_ToggleChannel+0xfc>
		case DIO_PortB:ToggleBit(PORTB_Register,BitNo);break;
    1920:	a8 e3       	ldi	r26, 0x38	; 56
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e8 e3       	ldi	r30, 0x38	; 56
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_ToggleChannel+0xa4>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <DIO_ToggleChannel+0xa0>
    1942:	84 27       	eor	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	27 c0       	rjmp	.+78     	; 0x1996 <DIO_ToggleChannel+0xfc>
		case DIO_PortC:ToggleBit(PORTC_Register,BitNo);break;
    1948:	a5 e3       	ldi	r26, 0x35	; 53
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e5 e3       	ldi	r30, 0x35	; 53
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <DIO_ToggleChannel+0xcc>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <DIO_ToggleChannel+0xc8>
    196a:	84 27       	eor	r24, r20
    196c:	8c 93       	st	X, r24
    196e:	13 c0       	rjmp	.+38     	; 0x1996 <DIO_ToggleChannel+0xfc>
		case DIO_PortD:ToggleBit(PORTD_Register,BitNo);break;
    1970:	a2 e3       	ldi	r26, 0x32	; 50
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e2 e3       	ldi	r30, 0x32	; 50
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	48 2f       	mov	r20, r24
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	02 2e       	mov	r0, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <DIO_ToggleChannel+0xf4>
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	0a 94       	dec	r0
    1990:	e2 f7       	brpl	.-8      	; 0x198a <DIO_ToggleChannel+0xf0>
    1992:	84 27       	eor	r24, r20
    1994:	8c 93       	st	X, r24
	};
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <DIO_WritePort>:

void DIO_WritePort(DIO_PortTypes PortID,U8 PortValue)
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <DIO_WritePort+0x6>
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <DIO_WritePort+0x8>
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	6a 83       	std	Y+2, r22	; 0x02
	switch (PortID){
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	3c 83       	std	Y+4, r19	; 0x04
    19be:	2b 83       	std	Y+3, r18	; 0x03
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	9c 81       	ldd	r25, Y+4	; 0x04
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	91 05       	cpc	r25, r1
    19c8:	d1 f0       	breq	.+52     	; 0x19fe <DIO_WritePort+0x58>
    19ca:	2b 81       	ldd	r18, Y+3	; 0x03
    19cc:	3c 81       	ldd	r19, Y+4	; 0x04
    19ce:	22 30       	cpi	r18, 0x02	; 2
    19d0:	31 05       	cpc	r19, r1
    19d2:	2c f4       	brge	.+10     	; 0x19de <DIO_WritePort+0x38>
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	61 f0       	breq	.+24     	; 0x19f4 <DIO_WritePort+0x4e>
    19dc:	1e c0       	rjmp	.+60     	; 0x1a1a <DIO_WritePort+0x74>
    19de:	2b 81       	ldd	r18, Y+3	; 0x03
    19e0:	3c 81       	ldd	r19, Y+4	; 0x04
    19e2:	22 30       	cpi	r18, 0x02	; 2
    19e4:	31 05       	cpc	r19, r1
    19e6:	81 f0       	breq	.+32     	; 0x1a08 <DIO_WritePort+0x62>
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	83 30       	cpi	r24, 0x03	; 3
    19ee:	91 05       	cpc	r25, r1
    19f0:	81 f0       	breq	.+32     	; 0x1a12 <DIO_WritePort+0x6c>
    19f2:	13 c0       	rjmp	.+38     	; 0x1a1a <DIO_WritePort+0x74>
	case DIO_PortA:PORTA_Register = PortValue;break;
    19f4:	eb e3       	ldi	r30, 0x3B	; 59
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	80 83       	st	Z, r24
    19fc:	0e c0       	rjmp	.+28     	; 0x1a1a <DIO_WritePort+0x74>
	case DIO_PortB:PORTB_Register = PortValue;break;
    19fe:	e8 e3       	ldi	r30, 0x38	; 56
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	80 83       	st	Z, r24
    1a06:	09 c0       	rjmp	.+18     	; 0x1a1a <DIO_WritePort+0x74>
	case DIO_PortC:PORTC_Register = PortValue;break;
    1a08:	e5 e3       	ldi	r30, 0x35	; 53
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	80 83       	st	Z, r24
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <DIO_WritePort+0x74>
	case DIO_PortD:PORTD_Register = PortValue;break;
    1a12:	e2 e3       	ldi	r30, 0x32	; 50
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	80 83       	st	Z, r24
	}
}
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <DIO_ReadPort>:

U8 DIO_ReadPort(DIO_PortTypes PortID)
{
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <DIO_ReadPort+0x6>
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <DIO_ReadPort+0x8>
    1a30:	0f 92       	push	r0
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	8a 83       	std	Y+2, r24	; 0x02
	U8 PortValue;
	switch (PortID){
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	3d 83       	std	Y+5, r19	; 0x05
    1a40:	2c 83       	std	Y+4, r18	; 0x04
    1a42:	8c 81       	ldd	r24, Y+4	; 0x04
    1a44:	9d 81       	ldd	r25, Y+5	; 0x05
    1a46:	81 30       	cpi	r24, 0x01	; 1
    1a48:	91 05       	cpc	r25, r1
    1a4a:	e1 f0       	breq	.+56     	; 0x1a84 <DIO_ReadPort+0x5c>
    1a4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <DIO_ReadPort+0x38>
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	61 f0       	breq	.+24     	; 0x1a76 <DIO_ReadPort+0x4e>
    1a5e:	27 c0       	rjmp	.+78     	; 0x1aae <DIO_ReadPort+0x86>
    1a60:	2c 81       	ldd	r18, Y+4	; 0x04
    1a62:	3d 81       	ldd	r19, Y+5	; 0x05
    1a64:	22 30       	cpi	r18, 0x02	; 2
    1a66:	31 05       	cpc	r19, r1
    1a68:	a1 f0       	breq	.+40     	; 0x1a92 <DIO_ReadPort+0x6a>
    1a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6e:	83 30       	cpi	r24, 0x03	; 3
    1a70:	91 05       	cpc	r25, r1
    1a72:	b1 f0       	breq	.+44     	; 0x1aa0 <DIO_ReadPort+0x78>
    1a74:	1c c0       	rjmp	.+56     	; 0x1aae <DIO_ReadPort+0x86>
	case DIO_PortA: return PortValue = PORTA_Register;break;
    1a76:	eb e3       	ldi	r30, 0x3B	; 59
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	99 81       	ldd	r25, Y+1	; 0x01
    1a80:	9b 83       	std	Y+3, r25	; 0x03
    1a82:	16 c0       	rjmp	.+44     	; 0x1ab0 <DIO_ReadPort+0x88>
	case DIO_PortB: return PortValue = PORTB_Register;break;
    1a84:	e8 e3       	ldi	r30, 0x38	; 56
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	29 81       	ldd	r18, Y+1	; 0x01
    1a8e:	2b 83       	std	Y+3, r18	; 0x03
    1a90:	0f c0       	rjmp	.+30     	; 0x1ab0 <DIO_ReadPort+0x88>
	case DIO_PortC: return PortValue = PORTC_Register;break;
    1a92:	e5 e3       	ldi	r30, 0x35	; 53
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	39 81       	ldd	r19, Y+1	; 0x01
    1a9c:	3b 83       	std	Y+3, r19	; 0x03
    1a9e:	08 c0       	rjmp	.+16     	; 0x1ab0 <DIO_ReadPort+0x88>
	case DIO_PortD: return PortValue = PORTD_Register;break;
    1aa0:	e2 e3       	ldi	r30, 0x32	; 50
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	8b 83       	std	Y+3, r24	; 0x03
    1aac:	01 c0       	rjmp	.+2      	; 0x1ab0 <DIO_ReadPort+0x88>
	}
	return 0;
    1aae:	1b 82       	std	Y+3, r1	; 0x03
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <DIO_ConfigPort>:

void DIO_ConfigPort(DIO_PortTypes PortID , U8 Direction)
{
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <DIO_ConfigPort+0x6>
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <DIO_ConfigPort+0x8>
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	6a 83       	std	Y+2, r22	; 0x02
	switch (PortID){
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	3c 83       	std	Y+4, r19	; 0x04
    1ada:	2b 83       	std	Y+3, r18	; 0x03
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	d1 f0       	breq	.+52     	; 0x1b1a <DIO_ConfigPort+0x58>
    1ae6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aea:	22 30       	cpi	r18, 0x02	; 2
    1aec:	31 05       	cpc	r19, r1
    1aee:	2c f4       	brge	.+10     	; 0x1afa <DIO_ConfigPort+0x38>
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	9c 81       	ldd	r25, Y+4	; 0x04
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	61 f0       	breq	.+24     	; 0x1b10 <DIO_ConfigPort+0x4e>
    1af8:	1e c0       	rjmp	.+60     	; 0x1b36 <DIO_ConfigPort+0x74>
    1afa:	2b 81       	ldd	r18, Y+3	; 0x03
    1afc:	3c 81       	ldd	r19, Y+4	; 0x04
    1afe:	22 30       	cpi	r18, 0x02	; 2
    1b00:	31 05       	cpc	r19, r1
    1b02:	81 f0       	breq	.+32     	; 0x1b24 <DIO_ConfigPort+0x62>
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	9c 81       	ldd	r25, Y+4	; 0x04
    1b08:	83 30       	cpi	r24, 0x03	; 3
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	81 f0       	breq	.+32     	; 0x1b2e <DIO_ConfigPort+0x6c>
    1b0e:	13 c0       	rjmp	.+38     	; 0x1b36 <DIO_ConfigPort+0x74>
		case DIO_PortA:DDRA_Register = Direction;break;
    1b10:	ea e3       	ldi	r30, 0x3A	; 58
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	80 83       	st	Z, r24
    1b18:	0e c0       	rjmp	.+28     	; 0x1b36 <DIO_ConfigPort+0x74>
		case DIO_PortB:DDRB_Register = Direction;break;
    1b1a:	e7 e3       	ldi	r30, 0x37	; 55
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	80 83       	st	Z, r24
    1b22:	09 c0       	rjmp	.+18     	; 0x1b36 <DIO_ConfigPort+0x74>
		case DIO_PortC:DDRC_Register = Direction;break;
    1b24:	e4 e3       	ldi	r30, 0x34	; 52
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	80 83       	st	Z, r24
    1b2c:	04 c0       	rjmp	.+8      	; 0x1b36 <DIO_ConfigPort+0x74>
		case DIO_PortD:DDRD_Register = Direction;break;
    1b2e:	e1 e3       	ldi	r30, 0x31	; 49
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	80 83       	st	Z, r24
	}
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <DIO_WriteChannelGroup>:

void DIO_WriteChannelGroup(DIO_PortTypes PortID, U8 MASK , U8 DATA)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <DIO_WriteChannelGroup+0x6>
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <DIO_WriteChannelGroup+0x8>
    1b4c:	0f 92       	push	r0
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	6a 83       	std	Y+2, r22	; 0x02
    1b56:	4b 83       	std	Y+3, r20	; 0x03
	
	switch(PortID)
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	3d 83       	std	Y+5, r19	; 0x05
    1b60:	2c 83       	std	Y+4, r18	; 0x04
    1b62:	8c 81       	ldd	r24, Y+4	; 0x04
    1b64:	9d 81       	ldd	r25, Y+5	; 0x05
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	91 05       	cpc	r25, r1
    1b6a:	29 f1       	breq	.+74     	; 0x1bb6 <DIO_WriteChannelGroup+0x72>
    1b6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b70:	22 30       	cpi	r18, 0x02	; 2
    1b72:	31 05       	cpc	r19, r1
    1b74:	2c f4       	brge	.+10     	; 0x1b80 <DIO_WriteChannelGroup+0x3c>
    1b76:	8c 81       	ldd	r24, Y+4	; 0x04
    1b78:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	61 f0       	breq	.+24     	; 0x1b96 <DIO_WriteChannelGroup+0x52>
    1b7e:	4a c0       	rjmp	.+148    	; 0x1c14 <DIO_WriteChannelGroup+0xd0>
    1b80:	2c 81       	ldd	r18, Y+4	; 0x04
    1b82:	3d 81       	ldd	r19, Y+5	; 0x05
    1b84:	22 30       	cpi	r18, 0x02	; 2
    1b86:	31 05       	cpc	r19, r1
    1b88:	31 f1       	breq	.+76     	; 0x1bd6 <DIO_WriteChannelGroup+0x92>
    1b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8e:	83 30       	cpi	r24, 0x03	; 3
    1b90:	91 05       	cpc	r25, r1
    1b92:	89 f1       	breq	.+98     	; 0x1bf6 <DIO_WriteChannelGroup+0xb2>
    1b94:	3f c0       	rjmp	.+126    	; 0x1c14 <DIO_WriteChannelGroup+0xd0>
	{
		case DIO_PortA:PORTA_Register = (PORTA_Register & ~MASK)|(DATA & MASK);break;
    1b96:	ab e3       	ldi	r26, 0x3B	; 59
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	eb e3       	ldi	r30, 0x3B	; 59
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	98 2f       	mov	r25, r24
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	80 95       	com	r24
    1ba6:	29 2f       	mov	r18, r25
    1ba8:	28 23       	and	r18, r24
    1baa:	9b 81       	ldd	r25, Y+3	; 0x03
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	89 23       	and	r24, r25
    1bb0:	82 2b       	or	r24, r18
    1bb2:	8c 93       	st	X, r24
    1bb4:	2f c0       	rjmp	.+94     	; 0x1c14 <DIO_WriteChannelGroup+0xd0>
		case DIO_PortB:PORTB_Register = (PORTB_Register & ~MASK)|(DATA & MASK);break;
    1bb6:	a8 e3       	ldi	r26, 0x38	; 56
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e8 e3       	ldi	r30, 0x38	; 56
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	80 95       	com	r24
    1bc6:	29 2f       	mov	r18, r25
    1bc8:	28 23       	and	r18, r24
    1bca:	9b 81       	ldd	r25, Y+3	; 0x03
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	89 23       	and	r24, r25
    1bd0:	82 2b       	or	r24, r18
    1bd2:	8c 93       	st	X, r24
    1bd4:	1f c0       	rjmp	.+62     	; 0x1c14 <DIO_WriteChannelGroup+0xd0>
		case DIO_PortC:PORTC_Register = (PORTC_Register & ~MASK)|(DATA & MASK);break;
    1bd6:	a5 e3       	ldi	r26, 0x35	; 53
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e5 e3       	ldi	r30, 0x35	; 53
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	98 2f       	mov	r25, r24
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	80 95       	com	r24
    1be6:	29 2f       	mov	r18, r25
    1be8:	28 23       	and	r18, r24
    1bea:	9b 81       	ldd	r25, Y+3	; 0x03
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	89 23       	and	r24, r25
    1bf0:	82 2b       	or	r24, r18
    1bf2:	8c 93       	st	X, r24
    1bf4:	0f c0       	rjmp	.+30     	; 0x1c14 <DIO_WriteChannelGroup+0xd0>
		case DIO_PortD:PORTD_Register = (PORTD_Register & ~MASK)|(DATA & MASK);break;
    1bf6:	a2 e3       	ldi	r26, 0x32	; 50
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e2 e3       	ldi	r30, 0x32	; 50
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	98 2f       	mov	r25, r24
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	80 95       	com	r24
    1c06:	29 2f       	mov	r18, r25
    1c08:	28 23       	and	r18, r24
    1c0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	89 23       	and	r24, r25
    1c10:	82 2b       	or	r24, r18
    1c12:	8c 93       	st	X, r24
	}
}
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <DIO_Init>:
	{OUTPUT,STD_High},	//PORTD6
	{OUTPUT,STD_High},	//PORTD7
};

void DIO_Init(void)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	29 97       	sbiw	r28, 0x09	; 9
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
	DIO_ChannelTypes Count = DIO_ChannelA0;
    1c38:	1b 82       	std	Y+3, r1	; 0x03
	DIO_ChannelTypes PortX;
	DIO_ChannelTypes BitNo;
	
	for (Count = DIO_ChannelA0; Count < PINCOUNT; Count++)
    1c3a:	1b 82       	std	Y+3, r1	; 0x03
    1c3c:	05 c1       	rjmp	.+522    	; 0x1e48 <DIO_Init+0x224>
	{
		PortX = Count/8;
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	86 95       	lsr	r24
    1c42:	86 95       	lsr	r24
    1c44:	86 95       	lsr	r24
    1c46:	8a 83       	std	Y+2, r24	; 0x02
		BitNo = Count%8;
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	87 70       	andi	r24, 0x07	; 7
    1c4c:	89 83       	std	Y+1, r24	; 0x01
		switch(PinConfig[Count].Direction)
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	88 2f       	mov	r24, r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	fc 01       	movw	r30, r24
    1c5a:	e8 59       	subi	r30, 0x98	; 152
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	39 87       	std	Y+9, r19	; 0x09
    1c66:	28 87       	std	Y+8, r18	; 0x08
    1c68:	88 85       	ldd	r24, Y+8	; 0x08
    1c6a:	99 85       	ldd	r25, Y+9	; 0x09
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	39 f0       	breq	.+14     	; 0x1c7e <DIO_Init+0x5a>
    1c70:	28 85       	ldd	r18, Y+8	; 0x08
    1c72:	39 85       	ldd	r19, Y+9	; 0x09
    1c74:	21 30       	cpi	r18, 0x01	; 1
    1c76:	31 05       	cpc	r19, r1
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <DIO_Init+0x58>
    1c7a:	75 c0       	rjmp	.+234    	; 0x1d66 <DIO_Init+0x142>
    1c7c:	e2 c0       	rjmp	.+452    	; 0x1e42 <DIO_Init+0x21e>
		{
			case INPUT:
			switch(PortX){
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	3f 83       	std	Y+7, r19	; 0x07
    1c86:	2e 83       	std	Y+6, r18	; 0x06
    1c88:	8e 81       	ldd	r24, Y+6	; 0x06
    1c8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	91 05       	cpc	r25, r1
    1c90:	59 f1       	breq	.+86     	; 0x1ce8 <DIO_Init+0xc4>
    1c92:	2e 81       	ldd	r18, Y+6	; 0x06
    1c94:	3f 81       	ldd	r19, Y+7	; 0x07
    1c96:	22 30       	cpi	r18, 0x02	; 2
    1c98:	31 05       	cpc	r19, r1
    1c9a:	2c f4       	brge	.+10     	; 0x1ca6 <DIO_Init+0x82>
    1c9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	69 f0       	breq	.+26     	; 0x1cbe <DIO_Init+0x9a>
    1ca4:	ce c0       	rjmp	.+412    	; 0x1e42 <DIO_Init+0x21e>
    1ca6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ca8:	3f 81       	ldd	r19, Y+7	; 0x07
    1caa:	22 30       	cpi	r18, 0x02	; 2
    1cac:	31 05       	cpc	r19, r1
    1cae:	89 f1       	breq	.+98     	; 0x1d12 <DIO_Init+0xee>
    1cb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb4:	83 30       	cpi	r24, 0x03	; 3
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <DIO_Init+0x98>
    1cba:	40 c0       	rjmp	.+128    	; 0x1d3c <DIO_Init+0x118>
    1cbc:	c2 c0       	rjmp	.+388    	; 0x1e42 <DIO_Init+0x21e>
				case DIO_PortA:ClearBit(DDRA_Register,BitNo);break;
    1cbe:	aa e3       	ldi	r26, 0x3A	; 58
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	ea e3       	ldi	r30, 0x3A	; 58
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	48 2f       	mov	r20, r24
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <DIO_Init+0xb8>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <DIO_Init+0xb4>
    1ce0:	80 95       	com	r24
    1ce2:	84 23       	and	r24, r20
    1ce4:	8c 93       	st	X, r24
    1ce6:	ad c0       	rjmp	.+346    	; 0x1e42 <DIO_Init+0x21e>
				case DIO_PortB:ClearBit(DDRB_Register,BitNo);break;
    1ce8:	a7 e3       	ldi	r26, 0x37	; 55
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e7 e3       	ldi	r30, 0x37	; 55
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	48 2f       	mov	r20, r24
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	02 2e       	mov	r0, r18
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <DIO_Init+0xe2>
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	0a 94       	dec	r0
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <DIO_Init+0xde>
    1d0a:	80 95       	com	r24
    1d0c:	84 23       	and	r24, r20
    1d0e:	8c 93       	st	X, r24
    1d10:	98 c0       	rjmp	.+304    	; 0x1e42 <DIO_Init+0x21e>
				case DIO_PortC:ClearBit(DDRC_Register,BitNo);break;
    1d12:	a4 e3       	ldi	r26, 0x34	; 52
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e4 e3       	ldi	r30, 0x34	; 52
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	48 2f       	mov	r20, r24
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	02 2e       	mov	r0, r18
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <DIO_Init+0x10c>
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	0a 94       	dec	r0
    1d32:	e2 f7       	brpl	.-8      	; 0x1d2c <DIO_Init+0x108>
    1d34:	80 95       	com	r24
    1d36:	84 23       	and	r24, r20
    1d38:	8c 93       	st	X, r24
    1d3a:	83 c0       	rjmp	.+262    	; 0x1e42 <DIO_Init+0x21e>
				case DIO_PortD:ClearBit(DDRD_Register,BitNo);break;
    1d3c:	a1 e3       	ldi	r26, 0x31	; 49
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e1 e3       	ldi	r30, 0x31	; 49
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	48 2f       	mov	r20, r24
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	02 2e       	mov	r0, r18
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <DIO_Init+0x136>
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	0a 94       	dec	r0
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <DIO_Init+0x132>
    1d5e:	80 95       	com	r24
    1d60:	84 23       	and	r24, r20
    1d62:	8c 93       	st	X, r24
    1d64:	6e c0       	rjmp	.+220    	; 0x1e42 <DIO_Init+0x21e>
			}
				break;
			case OUTPUT:
			switch(PortX){
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	3d 83       	std	Y+5, r19	; 0x05
    1d6e:	2c 83       	std	Y+4, r18	; 0x04
    1d70:	8c 81       	ldd	r24, Y+4	; 0x04
    1d72:	9d 81       	ldd	r25, Y+5	; 0x05
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	91 05       	cpc	r25, r1
    1d78:	49 f1       	breq	.+82     	; 0x1dcc <DIO_Init+0x1a8>
    1d7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7e:	22 30       	cpi	r18, 0x02	; 2
    1d80:	31 05       	cpc	r19, r1
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <DIO_Init+0x16a>
    1d84:	8c 81       	ldd	r24, Y+4	; 0x04
    1d86:	9d 81       	ldd	r25, Y+5	; 0x05
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	61 f0       	breq	.+24     	; 0x1da4 <DIO_Init+0x180>
    1d8c:	5a c0       	rjmp	.+180    	; 0x1e42 <DIO_Init+0x21e>
    1d8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d90:	3d 81       	ldd	r19, Y+5	; 0x05
    1d92:	22 30       	cpi	r18, 0x02	; 2
    1d94:	31 05       	cpc	r19, r1
    1d96:	71 f1       	breq	.+92     	; 0x1df4 <DIO_Init+0x1d0>
    1d98:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9c:	83 30       	cpi	r24, 0x03	; 3
    1d9e:	91 05       	cpc	r25, r1
    1da0:	e9 f1       	breq	.+122    	; 0x1e1c <DIO_Init+0x1f8>
    1da2:	4f c0       	rjmp	.+158    	; 0x1e42 <DIO_Init+0x21e>
				case DIO_PortA:SetBit(DDRA_Register,BitNo);break;
    1da4:	aa e3       	ldi	r26, 0x3A	; 58
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	ea e3       	ldi	r30, 0x3A	; 58
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	48 2f       	mov	r20, r24
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 2e       	mov	r0, r18
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <DIO_Init+0x19e>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	0a 94       	dec	r0
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <DIO_Init+0x19a>
    1dc6:	84 2b       	or	r24, r20
    1dc8:	8c 93       	st	X, r24
    1dca:	3b c0       	rjmp	.+118    	; 0x1e42 <DIO_Init+0x21e>
				case DIO_PortB:SetBit(DDRB_Register,BitNo);break;
    1dcc:	a7 e3       	ldi	r26, 0x37	; 55
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e7 e3       	ldi	r30, 0x37	; 55
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	48 2f       	mov	r20, r24
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	02 2e       	mov	r0, r18
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <DIO_Init+0x1c6>
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	0a 94       	dec	r0
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <DIO_Init+0x1c2>
    1dee:	84 2b       	or	r24, r20
    1df0:	8c 93       	st	X, r24
    1df2:	27 c0       	rjmp	.+78     	; 0x1e42 <DIO_Init+0x21e>
				case DIO_PortC:SetBit(DDRC_Register,BitNo);break;
    1df4:	a4 e3       	ldi	r26, 0x34	; 52
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e4 e3       	ldi	r30, 0x34	; 52
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	48 2f       	mov	r20, r24
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 2e       	mov	r0, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <DIO_Init+0x1ee>
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	0a 94       	dec	r0
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <DIO_Init+0x1ea>
    1e16:	84 2b       	or	r24, r20
    1e18:	8c 93       	st	X, r24
    1e1a:	13 c0       	rjmp	.+38     	; 0x1e42 <DIO_Init+0x21e>
				case DIO_PortD:SetBit(DDRD_Register,BitNo);break;
    1e1c:	a1 e3       	ldi	r26, 0x31	; 49
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e1 e3       	ldi	r30, 0x31	; 49
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	48 2f       	mov	r20, r24
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 2e       	mov	r0, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_Init+0x216>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	0a 94       	dec	r0
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <DIO_Init+0x212>
    1e3e:	84 2b       	or	r24, r20
    1e40:	8c 93       	st	X, r24
{
	DIO_ChannelTypes Count = DIO_ChannelA0;
	DIO_ChannelTypes PortX;
	DIO_ChannelTypes BitNo;
	
	for (Count = DIO_ChannelA0; Count < PINCOUNT; Count++)
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	8f 5f       	subi	r24, 0xFF	; 255
    1e46:	8b 83       	std	Y+3, r24	; 0x03
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	80 32       	cpi	r24, 0x20	; 32
    1e4c:	08 f4       	brcc	.+2      	; 0x1e50 <DIO_Init+0x22c>
    1e4e:	f7 ce       	rjmp	.-530    	; 0x1c3e <DIO_Init+0x1a>
				case DIO_PortD:SetBit(DDRD_Register,BitNo);break;
			}
				break;
		}
	}
}
    1e50:	29 96       	adiw	r28, 0x09	; 9
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <mfrc522_init>:
#include "mfrc522.h"
#include "../../MCAL/SPI/SPI.h"


void mfrc522_init()
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	0f 92       	push	r0
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
	uint8_t byte;
	mfrc522_reset();
    1e6c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
    1e70:	8a e2       	ldi	r24, 0x2A	; 42
    1e72:	6d e8       	ldi	r22, 0x8D	; 141
    1e74:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
    1e78:	8b e2       	ldi	r24, 0x2B	; 43
    1e7a:	6e e3       	ldi	r22, 0x3E	; 62
    1e7c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
    1e80:	8c e2       	ldi	r24, 0x2C	; 44
    1e82:	6e e1       	ldi	r22, 0x1E	; 30
    1e84:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
    1e88:	8d e2       	ldi	r24, 0x2D	; 45
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
    1e90:	85 e1       	ldi	r24, 0x15	; 21
    1e92:	60 e4       	ldi	r22, 0x40	; 64
    1e94:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
    1e98:	81 e1       	ldi	r24, 0x11	; 17
    1e9a:	6d e3       	ldi	r22, 0x3D	; 61
    1e9c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>

	byte = mfrc522_read(TxControlReg);
    1ea0:	84 e1       	ldi	r24, 0x14	; 20
    1ea2:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <mfrc522_read>
    1ea6:	89 83       	std	Y+1, r24	; 0x01
	if(!(byte&0x03))
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	88 2f       	mov	r24, r24
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	83 70       	andi	r24, 0x03	; 3
    1eb0:	90 70       	andi	r25, 0x00	; 0
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	59 f4       	brne	.+22     	; 0x1ecc <mfrc522_init+0x6a>
	{
		mfrc522_write(TxControlReg,byte|0x03);
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	98 2f       	mov	r25, r24
    1eba:	93 60       	ori	r25, 0x03	; 3
    1ebc:	84 e1       	ldi	r24, 0x14	; 20
    1ebe:	69 2f       	mov	r22, r25
    1ec0:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>

        byte = mfrc522_read(TxControlReg);  // without this reader is not detected
    1ec4:	84 e1       	ldi	r24, 0x14	; 20
    1ec6:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <mfrc522_read>
    1eca:	89 83       	std	Y+1, r24	; 0x01
	}


}
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <mfrc522_write>:

void mfrc522_write(uint8_t reg, uint8_t data)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <mfrc522_write+0x6>
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	6a 83       	std	Y+2, r22	; 0x02
	//ENABLE_CHIP();
	SPI_Cannel_State(DIO_ChannelB4 ,SPI_Enable);
    1ee2:	8c e0       	ldi	r24, 0x0C	; 12
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	0e 94 82 09 	call	0x1304	; 0x1304 <SPI_Cannel_State>
    //_NOP();
	SPI_TX_RX((reg<<1)&0x7E);
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	8e 77       	andi	r24, 0x7E	; 126
    1ef6:	0e 94 42 09 	call	0x1284	; 0x1284 <SPI_TX_RX>
	SPI_TX_RX(data);
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	0e 94 42 09 	call	0x1284	; 0x1284 <SPI_TX_RX>
	SPI_Cannel_State(DIO_ChannelB4 ,SPI_Disable);
    1f00:	8c e0       	ldi	r24, 0x0C	; 12
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	0e 94 82 09 	call	0x1304	; 0x1304 <SPI_Cannel_State>
	//DISABLE_CHIP();
}
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <mfrc522_read+0x6>
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t data;	
	//ENABLE_CHIP();
	SPI_Cannel_State(DIO_ChannelB4 ,SPI_Enable);
    1f1e:	8c e0       	ldi	r24, 0x0C	; 12
    1f20:	61 e0       	ldi	r22, 0x01	; 1
    1f22:	0e 94 82 09 	call	0x1304	; 0x1304 <SPI_Cannel_State>
    //_NOP();
	SPI_TX_RX(((reg<<1)&0x7E)|0x80);
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	88 2f       	mov	r24, r24
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	8e 77       	andi	r24, 0x7E	; 126
    1f32:	80 68       	ori	r24, 0x80	; 128
    1f34:	0e 94 42 09 	call	0x1284	; 0x1284 <SPI_TX_RX>
	data = SPI_TX_RX(0x00);
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	0e 94 42 09 	call	0x1284	; 0x1284 <SPI_TX_RX>
    1f3e:	89 83       	std	Y+1, r24	; 0x01
	//DISABLE_CHIP();
	SPI_Cannel_State(DIO_ChannelB4 ,SPI_Disable);
    1f40:	8c e0       	ldi	r24, 0x0C	; 12
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	0e 94 82 09 	call	0x1304	; 0x1304 <SPI_Cannel_State>
	return data;
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <mfrc522_reset>:

void mfrc522_reset()
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
	mfrc522_write(CommandReg,SoftReset_CMD);
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	6f e0       	ldi	r22, 0x0F	; 15
    1f60:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
}
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <mfrc522_request>:

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	28 97       	sbiw	r28, 0x08	; 8
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	8e 83       	std	Y+6, r24	; 0x06
    1f84:	78 87       	std	Y+8, r23	; 0x08
    1f86:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
    1f88:	8d e0       	ldi	r24, 0x0D	; 13
    1f8a:	67 e0       	ldi	r22, 0x07	; 7
    1f8c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
	
	tag_type[0] = req_mode;
    1f90:	ef 81       	ldd	r30, Y+7	; 0x07
    1f92:	f8 85       	ldd	r31, Y+8	; 0x08
    1f94:	8e 81       	ldd	r24, Y+6	; 0x06
    1f96:	80 83       	st	Z, r24
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
    1f98:	2f 81       	ldd	r18, Y+7	; 0x07
    1f9a:	38 85       	ldd	r19, Y+8	; 0x08
    1f9c:	ef 81       	ldd	r30, Y+7	; 0x07
    1f9e:	f8 85       	ldd	r31, Y+8	; 0x08
    1fa0:	de 01       	movw	r26, r28
    1fa2:	12 96       	adiw	r26, 0x02	; 2
    1fa4:	8c e0       	ldi	r24, 0x0C	; 12
    1fa6:	b9 01       	movw	r22, r18
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	9f 01       	movw	r18, r30
    1fac:	8d 01       	movw	r16, r26
    1fae:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <mfrc522_to_card>
    1fb2:	89 83       	std	Y+1, r24	; 0x01

	if ((status != CARD_FOUND) || (backBits != 0x10))
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	81 30       	cpi	r24, 0x01	; 1
    1fb8:	49 f4       	brne	.+18     	; 0x1fcc <mfrc522_request+0x62>
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbe:	ac 81       	ldd	r26, Y+4	; 0x04
    1fc0:	bd 81       	ldd	r27, Y+5	; 0x05
    1fc2:	80 31       	cpi	r24, 0x10	; 16
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	a1 05       	cpc	r26, r1
    1fc8:	b1 05       	cpc	r27, r1
    1fca:	11 f0       	breq	.+4      	; 0x1fd0 <mfrc522_request+0x66>
	{    
		status = ERROR;
    1fcc:	83 e0       	ldi	r24, 0x03	; 3
    1fce:	89 83       	std	Y+1, r24	; 0x01
	}
   
	return status;
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd2:	28 96       	adiw	r28, 0x08	; 8
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	08 95       	ret

00001fe8 <mfrc522_to_card>:

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	64 97       	sbiw	r28, 0x14	; 20
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	8b 87       	std	Y+11, r24	; 0x0b
    2002:	7d 87       	std	Y+13, r23	; 0x0d
    2004:	6c 87       	std	Y+12, r22	; 0x0c
    2006:	4e 87       	std	Y+14, r20	; 0x0e
    2008:	38 8b       	std	Y+16, r19	; 0x10
    200a:	2f 87       	std	Y+15, r18	; 0x0f
    200c:	1a 8b       	std	Y+18, r17	; 0x12
    200e:	09 8b       	std	Y+17, r16	; 0x11
	uint8_t status = ERROR;
    2010:	83 e0       	ldi	r24, 0x03	; 3
    2012:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t irqEn = 0x00;
    2014:	19 86       	std	Y+9, r1	; 0x09
    uint8_t waitIRq = 0x00;
    2016:	18 86       	std	Y+8, r1	; 0x08
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
    2018:	8b 85       	ldd	r24, Y+11	; 0x0b
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	3c 8b       	std	Y+20, r19	; 0x14
    2020:	2b 8b       	std	Y+19, r18	; 0x13
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	8c 30       	cpi	r24, 0x0C	; 12
    2028:	91 05       	cpc	r25, r1
    202a:	51 f0       	breq	.+20     	; 0x2040 <mfrc522_to_card+0x58>
    202c:	eb 89       	ldd	r30, Y+19	; 0x13
    202e:	fc 89       	ldd	r31, Y+20	; 0x14
    2030:	ee 30       	cpi	r30, 0x0E	; 14
    2032:	f1 05       	cpc	r31, r1
    2034:	49 f4       	brne	.+18     	; 0x2048 <mfrc522_to_card+0x60>
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
    2036:	82 e1       	ldi	r24, 0x12	; 18
    2038:	89 87       	std	Y+9, r24	; 0x09
			waitIRq = 0x10;
    203a:	80 e1       	ldi	r24, 0x10	; 16
    203c:	88 87       	std	Y+8, r24	; 0x08
    203e:	04 c0       	rjmp	.+8      	; 0x2048 <mfrc522_to_card+0x60>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
    2040:	87 e7       	ldi	r24, 0x77	; 119
    2042:	89 87       	std	Y+9, r24	; 0x09
			waitIRq = 0x30;
    2044:	80 e3       	ldi	r24, 0x30	; 48
    2046:	88 87       	std	Y+8, r24	; 0x08
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
    2048:	84 e0       	ldi	r24, 0x04	; 4
    204a:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <mfrc522_read>
    204e:	8e 83       	std	Y+6, r24	; 0x06
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
    2050:	8e 81       	ldd	r24, Y+6	; 0x06
    2052:	98 2f       	mov	r25, r24
    2054:	9f 77       	andi	r25, 0x7F	; 127
    2056:	84 e0       	ldi	r24, 0x04	; 4
    2058:	69 2f       	mov	r22, r25
    205a:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
    205e:	8a e0       	ldi	r24, 0x0A	; 10
    2060:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <mfrc522_read>
    2064:	8e 83       	std	Y+6, r24	; 0x06
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    2066:	8e 81       	ldd	r24, Y+6	; 0x06
    2068:	98 2f       	mov	r25, r24
    206a:	90 68       	ori	r25, 0x80	; 128
    206c:	8a e0       	ldi	r24, 0x0A	; 10
    206e:	69 2f       	mov	r22, r25
    2070:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    207c:	19 82       	std	Y+1, r1	; 0x01
    207e:	1a 82       	std	Y+2, r1	; 0x02
    2080:	1b 82       	std	Y+3, r1	; 0x03
    2082:	1c 82       	std	Y+4, r1	; 0x04
    2084:	17 c0       	rjmp	.+46     	; 0x20b4 <mfrc522_to_card+0xcc>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
    2086:	29 81       	ldd	r18, Y+1	; 0x01
    2088:	3a 81       	ldd	r19, Y+2	; 0x02
    208a:	8c 85       	ldd	r24, Y+12	; 0x0c
    208c:	9d 85       	ldd	r25, Y+13	; 0x0d
    208e:	fc 01       	movw	r30, r24
    2090:	e2 0f       	add	r30, r18
    2092:	f3 1f       	adc	r31, r19
    2094:	90 81       	ld	r25, Z
    2096:	89 e0       	ldi	r24, 0x09	; 9
    2098:	69 2f       	mov	r22, r25
    209a:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	9a 81       	ldd	r25, Y+2	; 0x02
    20a2:	ab 81       	ldd	r26, Y+3	; 0x03
    20a4:	bc 81       	ldd	r27, Y+4	; 0x04
    20a6:	01 96       	adiw	r24, 0x01	; 1
    20a8:	a1 1d       	adc	r26, r1
    20aa:	b1 1d       	adc	r27, r1
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	ab 83       	std	Y+3, r26	; 0x03
    20b2:	bc 83       	std	Y+4, r27	; 0x04
    20b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	ab 81       	ldd	r26, Y+3	; 0x03
    20c4:	bc 81       	ldd	r27, Y+4	; 0x04
    20c6:	82 17       	cp	r24, r18
    20c8:	93 07       	cpc	r25, r19
    20ca:	a4 07       	cpc	r26, r20
    20cc:	b5 07       	cpc	r27, r21
    20ce:	d8 f2       	brcs	.-74     	; 0x2086 <mfrc522_to_card+0x9e>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d4:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
    if (cmd == Transceive_CMD)
    20d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    20da:	8c 30       	cpi	r24, 0x0C	; 12
    20dc:	59 f4       	brne	.+22     	; 0x20f4 <mfrc522_to_card+0x10c>
    {    
		n=mfrc522_read(BitFramingReg);
    20de:	8d e0       	ldi	r24, 0x0D	; 13
    20e0:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <mfrc522_read>
    20e4:	8e 83       	std	Y+6, r24	; 0x06
		mfrc522_write(BitFramingReg,n|0x80);  
    20e6:	8e 81       	ldd	r24, Y+6	; 0x06
    20e8:	98 2f       	mov	r25, r24
    20ea:	90 68       	ori	r25, 0x80	; 128
    20ec:	8d e0       	ldi	r24, 0x0D	; 13
    20ee:	69 2f       	mov	r22, r25
    20f0:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
	}   
    
	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    20f4:	80 ed       	ldi	r24, 0xD0	; 208
    20f6:	97 e0       	ldi	r25, 0x07	; 7
    20f8:	a0 e0       	ldi	r26, 0x00	; 0
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	9a 83       	std	Y+2, r25	; 0x02
    2100:	ab 83       	std	Y+3, r26	; 0x03
    2102:	bc 83       	std	Y+4, r27	; 0x04
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
    2104:	84 e0       	ldi	r24, 0x04	; 4
    2106:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <mfrc522_read>
    210a:	8e 83       	std	Y+6, r24	; 0x06
        i--;
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	ab 81       	ldd	r26, Y+3	; 0x03
    2112:	bc 81       	ldd	r27, Y+4	; 0x04
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	a1 09       	sbc	r26, r1
    2118:	b1 09       	sbc	r27, r1
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	ab 83       	std	Y+3, r26	; 0x03
    2120:	bc 83       	std	Y+4, r27	; 0x04
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	9a 81       	ldd	r25, Y+2	; 0x02
    2126:	ab 81       	ldd	r26, Y+3	; 0x03
    2128:	bc 81       	ldd	r27, Y+4	; 0x04
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	a1 05       	cpc	r26, r1
    212e:	b1 05       	cpc	r27, r1
    2130:	61 f0       	breq	.+24     	; 0x214a <mfrc522_to_card+0x162>
    2132:	8e 81       	ldd	r24, Y+6	; 0x06
    2134:	88 2f       	mov	r24, r24
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	81 70       	andi	r24, 0x01	; 1
    213a:	90 70       	andi	r25, 0x00	; 0
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	29 f4       	brne	.+10     	; 0x214a <mfrc522_to_card+0x162>
    2140:	8e 81       	ldd	r24, Y+6	; 0x06
    2142:	98 85       	ldd	r25, Y+8	; 0x08
    2144:	89 23       	and	r24, r25
    2146:	88 23       	and	r24, r24
    2148:	e9 f2       	breq	.-70     	; 0x2104 <mfrc522_to_card+0x11c>

	tmp=mfrc522_read(BitFramingReg);
    214a:	8d e0       	ldi	r24, 0x0D	; 13
    214c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <mfrc522_read>
    2150:	8d 83       	std	Y+5, r24	; 0x05
	mfrc522_write(BitFramingReg,tmp&(~0x80));
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	98 2f       	mov	r25, r24
    2156:	9f 77       	andi	r25, 0x7F	; 127
    2158:	8d e0       	ldi	r24, 0x0D	; 13
    215a:	69 2f       	mov	r22, r25
    215c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
	
    if (i != 0)
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	ab 81       	ldd	r26, Y+3	; 0x03
    2166:	bc 81       	ldd	r27, Y+4	; 0x04
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	a1 05       	cpc	r26, r1
    216c:	b1 05       	cpc	r27, r1
    216e:	09 f4       	brne	.+2      	; 0x2172 <mfrc522_to_card+0x18a>
    2170:	8c c0       	rjmp	.+280    	; 0x228a <mfrc522_to_card+0x2a2>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
    2172:	86 e0       	ldi	r24, 0x06	; 6
    2174:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <mfrc522_read>
    2178:	88 2f       	mov	r24, r24
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	8b 71       	andi	r24, 0x1B	; 27
    217e:	90 70       	andi	r25, 0x00	; 0
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	09 f0       	breq	.+2      	; 0x2186 <mfrc522_to_card+0x19e>
    2184:	80 c0       	rjmp	.+256    	; 0x2286 <mfrc522_to_card+0x29e>
        {
            status = CARD_FOUND;
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	8a 87       	std	Y+10, r24	; 0x0a
            if (n & irqEn & 0x01)
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	89 85       	ldd	r24, Y+9	; 0x09
    218e:	89 23       	and	r24, r25
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	81 70       	andi	r24, 0x01	; 1
    2196:	90 70       	andi	r25, 0x00	; 0
    2198:	88 23       	and	r24, r24
    219a:	11 f0       	breq	.+4      	; 0x21a0 <mfrc522_to_card+0x1b8>
            {   
				status = CARD_NOT_FOUND;			//??   
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	8a 87       	std	Y+10, r24	; 0x0a
			}

            if (cmd == Transceive_CMD)
    21a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    21a2:	8c 30       	cpi	r24, 0x0C	; 12
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <mfrc522_to_card+0x1c0>
    21a6:	71 c0       	rjmp	.+226    	; 0x228a <mfrc522_to_card+0x2a2>
            {
               	n = mfrc522_read(FIFOLevelReg);
    21a8:	8a e0       	ldi	r24, 0x0A	; 10
    21aa:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <mfrc522_read>
    21ae:	8e 83       	std	Y+6, r24	; 0x06
              	lastBits = mfrc522_read(ControlReg) & 0x07;
    21b0:	8c e0       	ldi	r24, 0x0C	; 12
    21b2:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <mfrc522_read>
    21b6:	87 70       	andi	r24, 0x07	; 7
    21b8:	8f 83       	std	Y+7, r24	; 0x07
                if (lastBits)
    21ba:	8f 81       	ldd	r24, Y+7	; 0x07
    21bc:	88 23       	and	r24, r24
    21be:	d9 f0       	breq	.+54     	; 0x21f6 <mfrc522_to_card+0x20e>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
    21c0:	8e 81       	ldd	r24, Y+6	; 0x06
    21c2:	88 2f       	mov	r24, r24
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	9c 01       	movw	r18, r24
    21ca:	22 0f       	add	r18, r18
    21cc:	33 1f       	adc	r19, r19
    21ce:	22 0f       	add	r18, r18
    21d0:	33 1f       	adc	r19, r19
    21d2:	22 0f       	add	r18, r18
    21d4:	33 1f       	adc	r19, r19
    21d6:	8f 81       	ldd	r24, Y+7	; 0x07
    21d8:	88 2f       	mov	r24, r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	82 0f       	add	r24, r18
    21de:	93 1f       	adc	r25, r19
    21e0:	aa 27       	eor	r26, r26
    21e2:	97 fd       	sbrc	r25, 7
    21e4:	a0 95       	com	r26
    21e6:	ba 2f       	mov	r27, r26
    21e8:	e9 89       	ldd	r30, Y+17	; 0x11
    21ea:	fa 89       	ldd	r31, Y+18	; 0x12
    21ec:	80 83       	st	Z, r24
    21ee:	91 83       	std	Z+1, r25	; 0x01
    21f0:	a2 83       	std	Z+2, r26	; 0x02
    21f2:	b3 83       	std	Z+3, r27	; 0x03
    21f4:	13 c0       	rjmp	.+38     	; 0x221c <mfrc522_to_card+0x234>
				}
                else
                {   
					*back_data_len = n*8;   
    21f6:	8e 81       	ldd	r24, Y+6	; 0x06
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	88 0f       	add	r24, r24
    2202:	99 1f       	adc	r25, r25
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	aa 27       	eor	r26, r26
    220a:	97 fd       	sbrc	r25, 7
    220c:	a0 95       	com	r26
    220e:	ba 2f       	mov	r27, r26
    2210:	e9 89       	ldd	r30, Y+17	; 0x11
    2212:	fa 89       	ldd	r31, Y+18	; 0x12
    2214:	80 83       	st	Z, r24
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	a2 83       	std	Z+2, r26	; 0x02
    221a:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
    221c:	8e 81       	ldd	r24, Y+6	; 0x06
    221e:	88 23       	and	r24, r24
    2220:	11 f4       	brne	.+4      	; 0x2226 <mfrc522_to_card+0x23e>
                {   
					n = 1;    
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	8e 83       	std	Y+6, r24	; 0x06
				}
                if (n > MAX_LEN)
    2226:	8e 81       	ldd	r24, Y+6	; 0x06
    2228:	81 31       	cpi	r24, 0x11	; 17
    222a:	10 f0       	brcs	.+4      	; 0x2230 <mfrc522_to_card+0x248>
                {   
					n = MAX_LEN;   
    222c:	80 e1       	ldi	r24, 0x10	; 16
    222e:	8e 83       	std	Y+6, r24	; 0x06
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
    2230:	19 82       	std	Y+1, r1	; 0x01
    2232:	1a 82       	std	Y+2, r1	; 0x02
    2234:	1b 82       	std	Y+3, r1	; 0x03
    2236:	1c 82       	std	Y+4, r1	; 0x04
    2238:	17 c0       	rjmp	.+46     	; 0x2268 <mfrc522_to_card+0x280>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
    223a:	29 81       	ldd	r18, Y+1	; 0x01
    223c:	3a 81       	ldd	r19, Y+2	; 0x02
    223e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2240:	98 89       	ldd	r25, Y+16	; 0x10
    2242:	8c 01       	movw	r16, r24
    2244:	02 0f       	add	r16, r18
    2246:	13 1f       	adc	r17, r19
    2248:	89 e0       	ldi	r24, 0x09	; 9
    224a:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <mfrc522_read>
    224e:	f8 01       	movw	r30, r16
    2250:	80 83       	st	Z, r24
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02
    2256:	ab 81       	ldd	r26, Y+3	; 0x03
    2258:	bc 81       	ldd	r27, Y+4	; 0x04
    225a:	01 96       	adiw	r24, 0x01	; 1
    225c:	a1 1d       	adc	r26, r1
    225e:	b1 1d       	adc	r27, r1
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	ab 83       	std	Y+3, r26	; 0x03
    2266:	bc 83       	std	Y+4, r27	; 0x04
    2268:	8e 81       	ldd	r24, Y+6	; 0x06
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	ab 81       	ldd	r26, Y+3	; 0x03
    2278:	bc 81       	ldd	r27, Y+4	; 0x04
    227a:	82 17       	cp	r24, r18
    227c:	93 07       	cpc	r25, r19
    227e:	a4 07       	cpc	r26, r20
    2280:	b5 07       	cpc	r27, r21
    2282:	d8 f2       	brcs	.-74     	; 0x223a <mfrc522_to_card+0x252>
    2284:	02 c0       	rjmp	.+4      	; 0x228a <mfrc522_to_card+0x2a2>
				}
            }
        }
        else
        {   
			status = ERROR;  
    2286:	83 e0       	ldi	r24, 0x03	; 3
    2288:	8a 87       	std	Y+10, r24	; 0x0a
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
    228a:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    228c:	64 96       	adiw	r28, 0x14	; 20
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	1f 91       	pop	r17
    229e:	0f 91       	pop	r16
    22a0:	08 95       	ret

000022a2 <mfrc522_get_card_serial>:


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	29 97       	sbiw	r28, 0x09	; 9
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	99 87       	std	Y+9, r25	; 0x09
    22bc:	88 87       	std	Y+8, r24	; 0x08
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    22be:	19 82       	std	Y+1, r1	; 0x01
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
    22c0:	8d e0       	ldi	r24, 0x0D	; 13
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
    22c8:	e8 85       	ldd	r30, Y+8	; 0x08
    22ca:	f9 85       	ldd	r31, Y+9	; 0x09
    22cc:	83 e9       	ldi	r24, 0x93	; 147
    22ce:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
    22d0:	88 85       	ldd	r24, Y+8	; 0x08
    22d2:	99 85       	ldd	r25, Y+9	; 0x09
    22d4:	fc 01       	movw	r30, r24
    22d6:	31 96       	adiw	r30, 0x01	; 1
    22d8:	80 e2       	ldi	r24, 0x20	; 32
    22da:	80 83       	st	Z, r24
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
    22dc:	28 85       	ldd	r18, Y+8	; 0x08
    22de:	39 85       	ldd	r19, Y+9	; 0x09
    22e0:	e8 85       	ldd	r30, Y+8	; 0x08
    22e2:	f9 85       	ldd	r31, Y+9	; 0x09
    22e4:	de 01       	movw	r26, r28
    22e6:	14 96       	adiw	r26, 0x04	; 4
    22e8:	8c e0       	ldi	r24, 0x0C	; 12
    22ea:	b9 01       	movw	r22, r18
    22ec:	42 e0       	ldi	r20, 0x02	; 2
    22ee:	9f 01       	movw	r18, r30
    22f0:	8d 01       	movw	r16, r26
    22f2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <mfrc522_to_card>
    22f6:	8b 83       	std	Y+3, r24	; 0x03

    if (status == CARD_FOUND)
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	81 30       	cpi	r24, 0x01	; 1
    22fc:	11 f5       	brne	.+68     	; 0x2342 <mfrc522_get_card_serial+0xa0>
	{
		//Check card serial number
		for (i=0; i<4; i++)
    22fe:	1a 82       	std	Y+2, r1	; 0x02
    2300:	0f c0       	rjmp	.+30     	; 0x2320 <mfrc522_get_card_serial+0x7e>
		{   
		 	serNumCheck ^= serial_out[i];
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	88 85       	ldd	r24, Y+8	; 0x08
    230a:	99 85       	ldd	r25, Y+9	; 0x09
    230c:	fc 01       	movw	r30, r24
    230e:	e2 0f       	add	r30, r18
    2310:	f3 1f       	adc	r31, r19
    2312:	90 81       	ld	r25, Z
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	89 27       	eor	r24, r25
    2318:	89 83       	std	Y+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	8f 5f       	subi	r24, 0xFF	; 255
    231e:	8a 83       	std	Y+2, r24	; 0x02
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	84 30       	cpi	r24, 0x04	; 4
    2324:	70 f3       	brcs	.-36     	; 0x2302 <mfrc522_get_card_serial+0x60>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	88 85       	ldd	r24, Y+8	; 0x08
    232e:	99 85       	ldd	r25, Y+9	; 0x09
    2330:	fc 01       	movw	r30, r24
    2332:	e2 0f       	add	r30, r18
    2334:	f3 1f       	adc	r31, r19
    2336:	90 81       	ld	r25, Z
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	98 17       	cp	r25, r24
    233c:	11 f0       	breq	.+4      	; 0x2342 <mfrc522_get_card_serial+0xa0>
		{   
			status = ERROR;    
    233e:	83 e0       	ldi	r24, 0x03	; 3
    2340:	8b 83       	std	Y+3, r24	; 0x03
		}
    }
    return status;
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2344:	29 96       	adiw	r28, 0x09	; 9
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	08 95       	ret

0000235a <LCD_Init>:
#include "../Includes/LCD_Config.h"
#include "../Includes/LCD.h"
void LCD_Init(void)
{
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	2e 97       	sbiw	r28, 0x0e	; 14
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	de bf       	out	0x3e, r29	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	cd bf       	out	0x3d, r28	; 61
	DIO_WriteChannel(LCD_RW,STD_Low);
    236e:	8a e0       	ldi	r24, 0x0A	; 10
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E,STD_High);
    2376:	8b e0       	ldi	r24, 0x0B	; 11
    2378:	61 e0       	ldi	r22, 0x01	; 1
    237a:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	a0 ea       	ldi	r26, 0xA0	; 160
    2384:	b1 e4       	ldi	r27, 0x41	; 65
    2386:	8b 87       	std	Y+11, r24	; 0x0b
    2388:	9c 87       	std	Y+12, r25	; 0x0c
    238a:	ad 87       	std	Y+13, r26	; 0x0d
    238c:	be 87       	std	Y+14, r27	; 0x0e
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
    238e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2390:	7c 85       	ldd	r23, Y+12	; 0x0c
    2392:	8d 85       	ldd	r24, Y+13	; 0x0d
    2394:	9e 85       	ldd	r25, Y+14	; 0x0e
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	4a ef       	ldi	r20, 0xFA	; 250
    239c:	54 e4       	ldi	r21, 0x44	; 68
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	8f 83       	std	Y+7, r24	; 0x07
    23a8:	98 87       	std	Y+8, r25	; 0x08
    23aa:	a9 87       	std	Y+9, r26	; 0x09
    23ac:	ba 87       	std	Y+10, r27	; 0x0a
		__ticks = (uint16_t) (__ms * 10.0);
    23ae:	6f 81       	ldd	r22, Y+7	; 0x07
    23b0:	78 85       	ldd	r23, Y+8	; 0x08
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e8       	ldi	r20, 0x80	; 128
    23bc:	5f e3       	ldi	r21, 0x3F	; 63
    23be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23c2:	88 23       	and	r24, r24
    23c4:	2c f4       	brge	.+10     	; 0x23d0 <LCD_Init+0x76>
		while(__ticks)
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9e 83       	std	Y+6, r25	; 0x06
    23cc:	8d 83       	std	Y+5, r24	; 0x05
    23ce:	3f c0       	rjmp	.+126    	; 0x244e <LCD_Init+0xf4>
		{
    23d0:	6f 81       	ldd	r22, Y+7	; 0x07
    23d2:	78 85       	ldd	r23, Y+8	; 0x08
    23d4:	89 85       	ldd	r24, Y+9	; 0x09
    23d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	3f ef       	ldi	r19, 0xFF	; 255
    23dc:	4f e7       	ldi	r20, 0x7F	; 127
    23de:	57 e4       	ldi	r21, 0x47	; 71
    23e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23e4:	18 16       	cp	r1, r24
    23e6:	4c f5       	brge	.+82     	; 0x243a <LCD_Init+0xe0>
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e2       	ldi	r20, 0x20	; 32
    23f6:	51 e4       	ldi	r21, 0x41	; 65
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	9e 83       	std	Y+6, r25	; 0x06
    240e:	8d 83       	std	Y+5, r24	; 0x05
    2410:	0f c0       	rjmp	.+30     	; 0x2430 <LCD_Init+0xd6>
    2412:	88 ec       	ldi	r24, 0xC8	; 200
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9c 83       	std	Y+4, r25	; 0x04
    2418:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_Init+0xc4>
    2422:	9c 83       	std	Y+4, r25	; 0x04
    2424:	8b 83       	std	Y+3, r24	; 0x03
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	9e 83       	std	Y+6, r25	; 0x06
    242e:	8d 83       	std	Y+5, r24	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
    2430:	8d 81       	ldd	r24, Y+5	; 0x05
    2432:	9e 81       	ldd	r25, Y+6	; 0x06
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	69 f7       	brne	.-38     	; 0x2412 <LCD_Init+0xb8>
    2438:	14 c0       	rjmp	.+40     	; 0x2462 <LCD_Init+0x108>
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
}

/**
   \ingroup util_delay
    243a:	6f 81       	ldd	r22, Y+7	; 0x07
    243c:	78 85       	ldd	r23, Y+8	; 0x08
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	9a 83       	std	Y+2, r25	; 0x02
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	9a 81       	ldd	r25, Y+2	; 0x02
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <LCD_Init+0x100>
    245e:	9a 83       	std	Y+2, r25	; 0x02
    2460:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_Cmd(0x33);
    2462:	83 e3       	ldi	r24, 0x33	; 51
    2464:	0e 94 22 13 	call	0x2644	; 0x2644 <LCD_Cmd>
	LCD_Cmd(0x32);
    2468:	82 e3       	ldi	r24, 0x32	; 50
    246a:	0e 94 22 13 	call	0x2644	; 0x2644 <LCD_Cmd>
	LCD_Cmd(0x28);		//Set Function 4Bit - 2Line - 5*8
    246e:	88 e2       	ldi	r24, 0x28	; 40
    2470:	0e 94 22 13 	call	0x2644	; 0x2644 <LCD_Cmd>
	LCD_Cmd(0x06);		//Entry Mode Move Right
    2474:	86 e0       	ldi	r24, 0x06	; 6
    2476:	0e 94 22 13 	call	0x2644	; 0x2644 <LCD_Cmd>
	LCD_Cmd(0x0C);		//Display ON & courser OFF & No Blinking
    247a:	8c e0       	ldi	r24, 0x0C	; 12
    247c:	0e 94 22 13 	call	0x2644	; 0x2644 <LCD_Cmd>
}
    2480:	2e 96       	adiw	r28, 0x0e	; 14
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	08 95       	ret

00002492 <Enable>:
void Enable (void)
{
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	68 97       	sbiw	r28, 0x18	; 24
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	f8 94       	cli
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	cd bf       	out	0x3d, r28	; 61
	DIO_WriteChannel(LCD_E,STD_Low);
    24a6:	8b e0       	ldi	r24, 0x0B	; 11
    24a8:	60 e0       	ldi	r22, 0x00	; 0
    24aa:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	a8 ec       	ldi	r26, 0xC8	; 200
    24b4:	b2 e4       	ldi	r27, 0x42	; 66
    24b6:	8d 8b       	std	Y+21, r24	; 0x15
    24b8:	9e 8b       	std	Y+22, r25	; 0x16
    24ba:	af 8b       	std	Y+23, r26	; 0x17
    24bc:	b8 8f       	std	Y+24, r27	; 0x18
	double __tmp = ((F_CPU) / 3e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 255)
	{
		_delay_ms(__us / 1000.0);
    24be:	6d 89       	ldd	r22, Y+21	; 0x15
    24c0:	7e 89       	ldd	r23, Y+22	; 0x16
    24c2:	8f 89       	ldd	r24, Y+23	; 0x17
    24c4:	98 8d       	ldd	r25, Y+24	; 0x18
    24c6:	2b ea       	ldi	r18, 0xAB	; 171
    24c8:	3a ea       	ldi	r19, 0xAA	; 170
    24ca:	4a e2       	ldi	r20, 0x2A	; 42
    24cc:	50 e4       	ldi	r21, 0x40	; 64
    24ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	89 8b       	std	Y+17, r24	; 0x11
    24d8:	9a 8b       	std	Y+18, r25	; 0x12
    24da:	ab 8b       	std	Y+19, r26	; 0x13
    24dc:	bc 8b       	std	Y+20, r27	; 0x14
		return;
    24de:	69 89       	ldd	r22, Y+17	; 0x11
    24e0:	7a 89       	ldd	r23, Y+18	; 0x12
    24e2:	8b 89       	ldd	r24, Y+19	; 0x13
    24e4:	9c 89       	ldd	r25, Y+20	; 0x14
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e8       	ldi	r20, 0x80	; 128
    24ec:	5f e3       	ldi	r21, 0x3F	; 63
    24ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f2:	88 23       	and	r24, r24
    24f4:	1c f4       	brge	.+6      	; 0x24fc <Enable+0x6a>
	}
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	88 8b       	std	Y+16, r24	; 0x10
    24fa:	91 c0       	rjmp	.+290    	; 0x261e <Enable+0x18c>
	else
    24fc:	69 89       	ldd	r22, Y+17	; 0x11
    24fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2500:	8b 89       	ldd	r24, Y+19	; 0x13
    2502:	9c 89       	ldd	r25, Y+20	; 0x14
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4f e7       	ldi	r20, 0x7F	; 127
    250a:	53 e4       	ldi	r21, 0x43	; 67
    250c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2510:	18 16       	cp	r1, r24
    2512:	0c f0       	brlt	.+2      	; 0x2516 <Enable+0x84>
    2514:	7b c0       	rjmp	.+246    	; 0x260c <Enable+0x17a>
		__ticks = (uint8_t)__tmp;
	_delay_loop_1(__ticks);
    2516:	6d 89       	ldd	r22, Y+21	; 0x15
    2518:	7e 89       	ldd	r23, Y+22	; 0x16
    251a:	8f 89       	ldd	r24, Y+23	; 0x17
    251c:	98 8d       	ldd	r25, Y+24	; 0x18
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	4a e7       	ldi	r20, 0x7A	; 122
    2524:	54 e4       	ldi	r21, 0x44	; 68
    2526:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	8c 87       	std	Y+12, r24	; 0x0c
    2530:	9d 87       	std	Y+13, r25	; 0x0d
    2532:	ae 87       	std	Y+14, r26	; 0x0e
    2534:	bf 87       	std	Y+15, r27	; 0x0f
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
    2536:	6c 85       	ldd	r22, Y+12	; 0x0c
    2538:	7d 85       	ldd	r23, Y+13	; 0x0d
    253a:	8e 85       	ldd	r24, Y+14	; 0x0e
    253c:	9f 85       	ldd	r25, Y+15	; 0x0f
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	4a ef       	ldi	r20, 0xFA	; 250
    2544:	54 e4       	ldi	r21, 0x44	; 68
    2546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	88 87       	std	Y+8, r24	; 0x08
    2550:	99 87       	std	Y+9, r25	; 0x09
    2552:	aa 87       	std	Y+10, r26	; 0x0a
    2554:	bb 87       	std	Y+11, r27	; 0x0b
		__ticks = (uint16_t) (__ms * 10.0);
    2556:	68 85       	ldd	r22, Y+8	; 0x08
    2558:	79 85       	ldd	r23, Y+9	; 0x09
    255a:	8a 85       	ldd	r24, Y+10	; 0x0a
    255c:	9b 85       	ldd	r25, Y+11	; 0x0b
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e8       	ldi	r20, 0x80	; 128
    2564:	5f e3       	ldi	r21, 0x3F	; 63
    2566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    256a:	88 23       	and	r24, r24
    256c:	2c f4       	brge	.+10     	; 0x2578 <Enable+0xe6>
		while(__ticks)
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9f 83       	std	Y+7, r25	; 0x07
    2574:	8e 83       	std	Y+6, r24	; 0x06
    2576:	3f c0       	rjmp	.+126    	; 0x25f6 <Enable+0x164>
		{
    2578:	68 85       	ldd	r22, Y+8	; 0x08
    257a:	79 85       	ldd	r23, Y+9	; 0x09
    257c:	8a 85       	ldd	r24, Y+10	; 0x0a
    257e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	3f ef       	ldi	r19, 0xFF	; 255
    2584:	4f e7       	ldi	r20, 0x7F	; 127
    2586:	57 e4       	ldi	r21, 0x47	; 71
    2588:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258c:	18 16       	cp	r1, r24
    258e:	4c f5       	brge	.+82     	; 0x25e2 <Enable+0x150>
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2590:	6c 85       	ldd	r22, Y+12	; 0x0c
    2592:	7d 85       	ldd	r23, Y+13	; 0x0d
    2594:	8e 85       	ldd	r24, Y+14	; 0x0e
    2596:	9f 85       	ldd	r25, Y+15	; 0x0f
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e2       	ldi	r20, 0x20	; 32
    259e:	51 e4       	ldi	r21, 0x41	; 65
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9f 83       	std	Y+7, r25	; 0x07
    25b6:	8e 83       	std	Y+6, r24	; 0x06
    25b8:	0f c0       	rjmp	.+30     	; 0x25d8 <Enable+0x146>
    25ba:	88 ec       	ldi	r24, 0xC8	; 200
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	9d 83       	std	Y+5, r25	; 0x05
    25c0:	8c 83       	std	Y+4, r24	; 0x04
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	9d 81       	ldd	r25, Y+5	; 0x05
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <Enable+0x134>
    25ca:	9d 83       	std	Y+5, r25	; 0x05
    25cc:	8c 83       	std	Y+4, r24	; 0x04
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ce:	8e 81       	ldd	r24, Y+6	; 0x06
    25d0:	9f 81       	ldd	r25, Y+7	; 0x07
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	9f 83       	std	Y+7, r25	; 0x07
    25d6:	8e 83       	std	Y+6, r24	; 0x06
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
    25d8:	8e 81       	ldd	r24, Y+6	; 0x06
    25da:	9f 81       	ldd	r25, Y+7	; 0x07
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	69 f7       	brne	.-38     	; 0x25ba <Enable+0x128>
    25e0:	24 c0       	rjmp	.+72     	; 0x262a <Enable+0x198>
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
}

/**
   \ingroup util_delay
    25e2:	68 85       	ldd	r22, Y+8	; 0x08
    25e4:	79 85       	ldd	r23, Y+9	; 0x09
    25e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	9f 83       	std	Y+7, r25	; 0x07
    25f4:	8e 83       	std	Y+6, r24	; 0x06
    25f6:	8e 81       	ldd	r24, Y+6	; 0x06
    25f8:	9f 81       	ldd	r25, Y+7	; 0x07
    25fa:	9b 83       	std	Y+3, r25	; 0x03
    25fc:	8a 83       	std	Y+2, r24	; 0x02
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	9b 81       	ldd	r25, Y+3	; 0x03
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <Enable+0x170>
    2606:	9b 83       	std	Y+3, r25	; 0x03
    2608:	8a 83       	std	Y+2, r24	; 0x02
    260a:	0f c0       	rjmp	.+30     	; 0x262a <Enable+0x198>
		__ticks = (uint8_t)__tmp;
	_delay_loop_1(__ticks);
}


#endif /* _UTIL_DELAY_H_ */
    260c:	69 89       	ldd	r22, Y+17	; 0x11
    260e:	7a 89       	ldd	r23, Y+18	; 0x12
    2610:	8b 89       	ldd	r24, Y+19	; 0x13
    2612:	9c 89       	ldd	r25, Y+20	; 0x14
    2614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	88 8b       	std	Y+16, r24	; 0x10
    261e:	88 89       	ldd	r24, Y+16	; 0x10
    2620:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	8a 95       	dec	r24
    2626:	f1 f7       	brne	.-4      	; 0x2624 <Enable+0x192>
    2628:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    262a:	8b e0       	ldi	r24, 0x0B	; 11
    262c:	61 e0       	ldi	r22, 0x01	; 1
    262e:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
}
    2632:	68 96       	adiw	r28, 0x18	; 24
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	cd bf       	out	0x3d, r28	; 61
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <LCD_Cmd>:
void LCD_Cmd(U8 Cmd)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	6e 97       	sbiw	r28, 0x1e	; 30
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	de bf       	out	0x3e, r29	; 62
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	8e 8f       	std	Y+30, r24	; 0x1e
	U8 PortValue = STD_Low;
    265a:	1d 8e       	std	Y+29, r1	; 0x1d
	DIO_WriteChannel(LCD_RS,STD_Low);
    265c:	89 e0       	ldi	r24, 0x09	; 9
    265e:	60 e0       	ldi	r22, 0x00	; 0
    2660:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
	PortValue = DIO_ReadPort(LCD_DataPort);
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <DIO_ReadPort>
    266a:	8d 8f       	std	Y+29, r24	; 0x1d
	PortValue = (PortValue & 0x0F)|(Cmd & 0xF0);
    266c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    266e:	98 2f       	mov	r25, r24
    2670:	9f 70       	andi	r25, 0x0F	; 15
    2672:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2674:	80 7f       	andi	r24, 0xF0	; 240
    2676:	89 2b       	or	r24, r25
    2678:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_WritePort(LCD_DataPort,PortValue);
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    267e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_WritePort>
	Enable();
    2682:	0e 94 49 12 	call	0x2492	; 0x2492 <Enable>
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	a0 ea       	ldi	r26, 0xA0	; 160
    268c:	b0 e4       	ldi	r27, 0x40	; 64
    268e:	89 8f       	std	Y+25, r24	; 0x19
    2690:	9a 8f       	std	Y+26, r25	; 0x1a
    2692:	ab 8f       	std	Y+27, r26	; 0x1b
    2694:	bc 8f       	std	Y+28, r27	; 0x1c
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
    2696:	69 8d       	ldd	r22, Y+25	; 0x19
    2698:	7a 8d       	ldd	r23, Y+26	; 0x1a
    269a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	4a ef       	ldi	r20, 0xFA	; 250
    26a4:	54 e4       	ldi	r21, 0x44	; 68
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	8d 8b       	std	Y+21, r24	; 0x15
    26b0:	9e 8b       	std	Y+22, r25	; 0x16
    26b2:	af 8b       	std	Y+23, r26	; 0x17
    26b4:	b8 8f       	std	Y+24, r27	; 0x18
		__ticks = (uint16_t) (__ms * 10.0);
    26b6:	6d 89       	ldd	r22, Y+21	; 0x15
    26b8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ba:	8f 89       	ldd	r24, Y+23	; 0x17
    26bc:	98 8d       	ldd	r25, Y+24	; 0x18
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e8       	ldi	r20, 0x80	; 128
    26c4:	5f e3       	ldi	r21, 0x3F	; 63
    26c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ca:	88 23       	and	r24, r24
    26cc:	2c f4       	brge	.+10     	; 0x26d8 <LCD_Cmd+0x94>
		while(__ticks)
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9c 8b       	std	Y+20, r25	; 0x14
    26d4:	8b 8b       	std	Y+19, r24	; 0x13
    26d6:	3f c0       	rjmp	.+126    	; 0x2756 <LCD_Cmd+0x112>
		{
    26d8:	6d 89       	ldd	r22, Y+21	; 0x15
    26da:	7e 89       	ldd	r23, Y+22	; 0x16
    26dc:	8f 89       	ldd	r24, Y+23	; 0x17
    26de:	98 8d       	ldd	r25, Y+24	; 0x18
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	3f ef       	ldi	r19, 0xFF	; 255
    26e4:	4f e7       	ldi	r20, 0x7F	; 127
    26e6:	57 e4       	ldi	r21, 0x47	; 71
    26e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ec:	18 16       	cp	r1, r24
    26ee:	4c f5       	brge	.+82     	; 0x2742 <LCD_Cmd+0xfe>
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f0:	69 8d       	ldd	r22, Y+25	; 0x19
    26f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e2       	ldi	r20, 0x20	; 32
    26fe:	51 e4       	ldi	r21, 0x41	; 65
    2700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9c 8b       	std	Y+20, r25	; 0x14
    2716:	8b 8b       	std	Y+19, r24	; 0x13
    2718:	0f c0       	rjmp	.+30     	; 0x2738 <LCD_Cmd+0xf4>
    271a:	88 ec       	ldi	r24, 0xC8	; 200
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9a 8b       	std	Y+18, r25	; 0x12
    2720:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2722:	89 89       	ldd	r24, Y+17	; 0x11
    2724:	9a 89       	ldd	r25, Y+18	; 0x12
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <LCD_Cmd+0xe2>
    272a:	9a 8b       	std	Y+18, r25	; 0x12
    272c:	89 8b       	std	Y+17, r24	; 0x11
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272e:	8b 89       	ldd	r24, Y+19	; 0x13
    2730:	9c 89       	ldd	r25, Y+20	; 0x14
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	9c 8b       	std	Y+20, r25	; 0x14
    2736:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
    2738:	8b 89       	ldd	r24, Y+19	; 0x13
    273a:	9c 89       	ldd	r25, Y+20	; 0x14
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	69 f7       	brne	.-38     	; 0x271a <LCD_Cmd+0xd6>
    2740:	14 c0       	rjmp	.+40     	; 0x276a <LCD_Cmd+0x126>
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
}

/**
   \ingroup util_delay
    2742:	6d 89       	ldd	r22, Y+21	; 0x15
    2744:	7e 89       	ldd	r23, Y+22	; 0x16
    2746:	8f 89       	ldd	r24, Y+23	; 0x17
    2748:	98 8d       	ldd	r25, Y+24	; 0x18
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9c 8b       	std	Y+20, r25	; 0x14
    2754:	8b 8b       	std	Y+19, r24	; 0x13
    2756:	8b 89       	ldd	r24, Y+19	; 0x13
    2758:	9c 89       	ldd	r25, Y+20	; 0x14
    275a:	98 8b       	std	Y+16, r25	; 0x10
    275c:	8f 87       	std	Y+15, r24	; 0x0f
    275e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2760:	98 89       	ldd	r25, Y+16	; 0x10
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <LCD_Cmd+0x11e>
    2766:	98 8b       	std	Y+16, r25	; 0x10
    2768:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	PortValue = DIO_ReadPort(LCD_DataPort);
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <DIO_ReadPort>
    2770:	8d 8f       	std	Y+29, r24	; 0x1d
	PortValue = (PortValue & 0x0F)|(Cmd << 4);
    2772:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2774:	28 2f       	mov	r18, r24
    2776:	2f 70       	andi	r18, 0x0F	; 15
    2778:	8e 8d       	ldd	r24, Y+30	; 0x1e
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	82 95       	swap	r24
    2780:	92 95       	swap	r25
    2782:	90 7f       	andi	r25, 0xF0	; 240
    2784:	98 27       	eor	r25, r24
    2786:	80 7f       	andi	r24, 0xF0	; 240
    2788:	98 27       	eor	r25, r24
    278a:	82 2b       	or	r24, r18
    278c:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_WritePort(LCD_DataPort,PortValue);
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2792:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_WritePort>
	Enable();
    2796:	0e 94 49 12 	call	0x2492	; 0x2492 <Enable>
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a0 e0       	ldi	r26, 0x00	; 0
    27a0:	b0 e4       	ldi	r27, 0x40	; 64
    27a2:	8b 87       	std	Y+11, r24	; 0x0b
    27a4:	9c 87       	std	Y+12, r25	; 0x0c
    27a6:	ad 87       	std	Y+13, r26	; 0x0d
    27a8:	be 87       	std	Y+14, r27	; 0x0e
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
    27aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	4a ef       	ldi	r20, 0xFA	; 250
    27b8:	54 e4       	ldi	r21, 0x44	; 68
    27ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	8f 83       	std	Y+7, r24	; 0x07
    27c4:	98 87       	std	Y+8, r25	; 0x08
    27c6:	a9 87       	std	Y+9, r26	; 0x09
    27c8:	ba 87       	std	Y+10, r27	; 0x0a
		__ticks = (uint16_t) (__ms * 10.0);
    27ca:	6f 81       	ldd	r22, Y+7	; 0x07
    27cc:	78 85       	ldd	r23, Y+8	; 0x08
    27ce:	89 85       	ldd	r24, Y+9	; 0x09
    27d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e8       	ldi	r20, 0x80	; 128
    27d8:	5f e3       	ldi	r21, 0x3F	; 63
    27da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27de:	88 23       	and	r24, r24
    27e0:	2c f4       	brge	.+10     	; 0x27ec <LCD_Cmd+0x1a8>
		while(__ticks)
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	9e 83       	std	Y+6, r25	; 0x06
    27e8:	8d 83       	std	Y+5, r24	; 0x05
    27ea:	3f c0       	rjmp	.+126    	; 0x286a <LCD_Cmd+0x226>
		{
    27ec:	6f 81       	ldd	r22, Y+7	; 0x07
    27ee:	78 85       	ldd	r23, Y+8	; 0x08
    27f0:	89 85       	ldd	r24, Y+9	; 0x09
    27f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	3f ef       	ldi	r19, 0xFF	; 255
    27f8:	4f e7       	ldi	r20, 0x7F	; 127
    27fa:	57 e4       	ldi	r21, 0x47	; 71
    27fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2800:	18 16       	cp	r1, r24
    2802:	4c f5       	brge	.+82     	; 0x2856 <LCD_Cmd+0x212>
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2804:	6b 85       	ldd	r22, Y+11	; 0x0b
    2806:	7c 85       	ldd	r23, Y+12	; 0x0c
    2808:	8d 85       	ldd	r24, Y+13	; 0x0d
    280a:	9e 85       	ldd	r25, Y+14	; 0x0e
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e2       	ldi	r20, 0x20	; 32
    2812:	51 e4       	ldi	r21, 0x41	; 65
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9e 83       	std	Y+6, r25	; 0x06
    282a:	8d 83       	std	Y+5, r24	; 0x05
    282c:	0f c0       	rjmp	.+30     	; 0x284c <LCD_Cmd+0x208>
    282e:	88 ec       	ldi	r24, 0xC8	; 200
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	9c 83       	std	Y+4, r25	; 0x04
    2834:	8b 83       	std	Y+3, r24	; 0x03
    2836:	8b 81       	ldd	r24, Y+3	; 0x03
    2838:	9c 81       	ldd	r25, Y+4	; 0x04
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <LCD_Cmd+0x1f6>
    283e:	9c 83       	std	Y+4, r25	; 0x04
    2840:	8b 83       	std	Y+3, r24	; 0x03
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2842:	8d 81       	ldd	r24, Y+5	; 0x05
    2844:	9e 81       	ldd	r25, Y+6	; 0x06
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	9e 83       	std	Y+6, r25	; 0x06
    284a:	8d 83       	std	Y+5, r24	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
    284e:	9e 81       	ldd	r25, Y+6	; 0x06
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	69 f7       	brne	.-38     	; 0x282e <LCD_Cmd+0x1ea>
    2854:	14 c0       	rjmp	.+40     	; 0x287e <LCD_Cmd+0x23a>
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
}

/**
   \ingroup util_delay
    2856:	6f 81       	ldd	r22, Y+7	; 0x07
    2858:	78 85       	ldd	r23, Y+8	; 0x08
    285a:	89 85       	ldd	r24, Y+9	; 0x09
    285c:	9a 85       	ldd	r25, Y+10	; 0x0a
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9e 83       	std	Y+6, r25	; 0x06
    2868:	8d 83       	std	Y+5, r24	; 0x05
    286a:	8d 81       	ldd	r24, Y+5	; 0x05
    286c:	9e 81       	ldd	r25, Y+6	; 0x06
    286e:	9a 83       	std	Y+2, r25	; 0x02
    2870:	89 83       	std	Y+1, r24	; 0x01
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	9a 81       	ldd	r25, Y+2	; 0x02
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <LCD_Cmd+0x232>
    287a:	9a 83       	std	Y+2, r25	; 0x02
    287c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	
}
    287e:	6e 96       	adiw	r28, 0x1e	; 30
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	f8 94       	cli
    2884:	de bf       	out	0x3e, r29	; 62
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	cd bf       	out	0x3d, r28	; 61
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	08 95       	ret

00002890 <LCD_Char>:
void LCD_Char(S8 Data)
{
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
    2898:	6e 97       	sbiw	r28, 0x1e	; 30
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	cd bf       	out	0x3d, r28	; 61
    28a4:	8e 8f       	std	Y+30, r24	; 0x1e
	U8 PortValue = STD_Low;
    28a6:	1d 8e       	std	Y+29, r1	; 0x1d
	DIO_WriteChannel(LCD_RS,STD_High);
    28a8:	89 e0       	ldi	r24, 0x09	; 9
    28aa:	61 e0       	ldi	r22, 0x01	; 1
    28ac:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
	PortValue = DIO_ReadPort(LCD_DataPort);
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <DIO_ReadPort>
    28b6:	8d 8f       	std	Y+29, r24	; 0x1d
	PortValue = (PortValue & 0x0F)|(Data & 0xF0);
    28b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ba:	98 2f       	mov	r25, r24
    28bc:	9f 70       	andi	r25, 0x0F	; 15
    28be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28c0:	80 7f       	andi	r24, 0xF0	; 240
    28c2:	89 2b       	or	r24, r25
    28c4:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_WritePort(LCD_DataPort,PortValue);
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    28ca:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_WritePort>
	Enable();
    28ce:	0e 94 49 12 	call	0x2492	; 0x2492 <Enable>
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	a0 ea       	ldi	r26, 0xA0	; 160
    28d8:	b0 e4       	ldi	r27, 0x40	; 64
    28da:	89 8f       	std	Y+25, r24	; 0x19
    28dc:	9a 8f       	std	Y+26, r25	; 0x1a
    28de:	ab 8f       	std	Y+27, r26	; 0x1b
    28e0:	bc 8f       	std	Y+28, r27	; 0x1c
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
    28e2:	69 8d       	ldd	r22, Y+25	; 0x19
    28e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	4a ef       	ldi	r20, 0xFA	; 250
    28f0:	54 e4       	ldi	r21, 0x44	; 68
    28f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	8d 8b       	std	Y+21, r24	; 0x15
    28fc:	9e 8b       	std	Y+22, r25	; 0x16
    28fe:	af 8b       	std	Y+23, r26	; 0x17
    2900:	b8 8f       	std	Y+24, r27	; 0x18
		__ticks = (uint16_t) (__ms * 10.0);
    2902:	6d 89       	ldd	r22, Y+21	; 0x15
    2904:	7e 89       	ldd	r23, Y+22	; 0x16
    2906:	8f 89       	ldd	r24, Y+23	; 0x17
    2908:	98 8d       	ldd	r25, Y+24	; 0x18
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e8       	ldi	r20, 0x80	; 128
    2910:	5f e3       	ldi	r21, 0x3F	; 63
    2912:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2916:	88 23       	and	r24, r24
    2918:	2c f4       	brge	.+10     	; 0x2924 <LCD_Char+0x94>
		while(__ticks)
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9c 8b       	std	Y+20, r25	; 0x14
    2920:	8b 8b       	std	Y+19, r24	; 0x13
    2922:	3f c0       	rjmp	.+126    	; 0x29a2 <LCD_Char+0x112>
		{
    2924:	6d 89       	ldd	r22, Y+21	; 0x15
    2926:	7e 89       	ldd	r23, Y+22	; 0x16
    2928:	8f 89       	ldd	r24, Y+23	; 0x17
    292a:	98 8d       	ldd	r25, Y+24	; 0x18
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	3f ef       	ldi	r19, 0xFF	; 255
    2930:	4f e7       	ldi	r20, 0x7F	; 127
    2932:	57 e4       	ldi	r21, 0x47	; 71
    2934:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2938:	18 16       	cp	r1, r24
    293a:	4c f5       	brge	.+82     	; 0x298e <LCD_Char+0xfe>
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    293c:	69 8d       	ldd	r22, Y+25	; 0x19
    293e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2940:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2942:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e2       	ldi	r20, 0x20	; 32
    294a:	51 e4       	ldi	r21, 0x41	; 65
    294c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	9c 8b       	std	Y+20, r25	; 0x14
    2962:	8b 8b       	std	Y+19, r24	; 0x13
    2964:	0f c0       	rjmp	.+30     	; 0x2984 <LCD_Char+0xf4>
    2966:	88 ec       	ldi	r24, 0xC8	; 200
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	9a 8b       	std	Y+18, r25	; 0x12
    296c:	89 8b       	std	Y+17, r24	; 0x11
    296e:	89 89       	ldd	r24, Y+17	; 0x11
    2970:	9a 89       	ldd	r25, Y+18	; 0x12
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	f1 f7       	brne	.-4      	; 0x2972 <LCD_Char+0xe2>
    2976:	9a 8b       	std	Y+18, r25	; 0x12
    2978:	89 8b       	std	Y+17, r24	; 0x11
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297a:	8b 89       	ldd	r24, Y+19	; 0x13
    297c:	9c 89       	ldd	r25, Y+20	; 0x14
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	9c 8b       	std	Y+20, r25	; 0x14
    2982:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
    2984:	8b 89       	ldd	r24, Y+19	; 0x13
    2986:	9c 89       	ldd	r25, Y+20	; 0x14
    2988:	00 97       	sbiw	r24, 0x00	; 0
    298a:	69 f7       	brne	.-38     	; 0x2966 <LCD_Char+0xd6>
    298c:	14 c0       	rjmp	.+40     	; 0x29b6 <LCD_Char+0x126>
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
}

/**
   \ingroup util_delay
    298e:	6d 89       	ldd	r22, Y+21	; 0x15
    2990:	7e 89       	ldd	r23, Y+22	; 0x16
    2992:	8f 89       	ldd	r24, Y+23	; 0x17
    2994:	98 8d       	ldd	r25, Y+24	; 0x18
    2996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	9c 8b       	std	Y+20, r25	; 0x14
    29a0:	8b 8b       	std	Y+19, r24	; 0x13
    29a2:	8b 89       	ldd	r24, Y+19	; 0x13
    29a4:	9c 89       	ldd	r25, Y+20	; 0x14
    29a6:	98 8b       	std	Y+16, r25	; 0x10
    29a8:	8f 87       	std	Y+15, r24	; 0x0f
    29aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ac:	98 89       	ldd	r25, Y+16	; 0x10
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <LCD_Char+0x11e>
    29b2:	98 8b       	std	Y+16, r25	; 0x10
    29b4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	PortValue = DIO_ReadPort(LCD_DataPort);
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <DIO_ReadPort>
    29bc:	8d 8f       	std	Y+29, r24	; 0x1d
	PortValue = (PortValue & 0x0F)|(Data << 4);
    29be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29c0:	28 2f       	mov	r18, r24
    29c2:	2f 70       	andi	r18, 0x0F	; 15
    29c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	82 95       	swap	r24
    29cc:	92 95       	swap	r25
    29ce:	90 7f       	andi	r25, 0xF0	; 240
    29d0:	98 27       	eor	r25, r24
    29d2:	80 7f       	andi	r24, 0xF0	; 240
    29d4:	98 27       	eor	r25, r24
    29d6:	82 2b       	or	r24, r18
    29d8:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_WritePort(LCD_DataPort,PortValue);
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    29de:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_WritePort>
	Enable();
    29e2:	0e 94 49 12 	call	0x2492	; 0x2492 <Enable>
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	a0 e0       	ldi	r26, 0x00	; 0
    29ec:	b0 e4       	ldi	r27, 0x40	; 64
    29ee:	8b 87       	std	Y+11, r24	; 0x0b
    29f0:	9c 87       	std	Y+12, r25	; 0x0c
    29f2:	ad 87       	std	Y+13, r26	; 0x0d
    29f4:	be 87       	std	Y+14, r27	; 0x0e
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
    29f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4a ef       	ldi	r20, 0xFA	; 250
    2a04:	54 e4       	ldi	r21, 0x44	; 68
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	8f 83       	std	Y+7, r24	; 0x07
    2a10:	98 87       	std	Y+8, r25	; 0x08
    2a12:	a9 87       	std	Y+9, r26	; 0x09
    2a14:	ba 87       	std	Y+10, r27	; 0x0a
		__ticks = (uint16_t) (__ms * 10.0);
    2a16:	6f 81       	ldd	r22, Y+7	; 0x07
    2a18:	78 85       	ldd	r23, Y+8	; 0x08
    2a1a:	89 85       	ldd	r24, Y+9	; 0x09
    2a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e8       	ldi	r20, 0x80	; 128
    2a24:	5f e3       	ldi	r21, 0x3F	; 63
    2a26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a2a:	88 23       	and	r24, r24
    2a2c:	2c f4       	brge	.+10     	; 0x2a38 <LCD_Char+0x1a8>
		while(__ticks)
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9e 83       	std	Y+6, r25	; 0x06
    2a34:	8d 83       	std	Y+5, r24	; 0x05
    2a36:	3f c0       	rjmp	.+126    	; 0x2ab6 <LCD_Char+0x226>
		{
    2a38:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3a:	78 85       	ldd	r23, Y+8	; 0x08
    2a3c:	89 85       	ldd	r24, Y+9	; 0x09
    2a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	3f ef       	ldi	r19, 0xFF	; 255
    2a44:	4f e7       	ldi	r20, 0x7F	; 127
    2a46:	57 e4       	ldi	r21, 0x47	; 71
    2a48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a4c:	18 16       	cp	r1, r24
    2a4e:	4c f5       	brge	.+82     	; 0x2aa2 <LCD_Char+0x212>
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e2       	ldi	r20, 0x20	; 32
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	9e 83       	std	Y+6, r25	; 0x06
    2a76:	8d 83       	std	Y+5, r24	; 0x05
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <LCD_Char+0x208>
    2a7a:	88 ec       	ldi	r24, 0xC8	; 200
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	9c 83       	std	Y+4, r25	; 0x04
    2a80:	8b 83       	std	Y+3, r24	; 0x03
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	9c 81       	ldd	r25, Y+4	; 0x04
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_Char+0x1f6>
    2a8a:	9c 83       	std	Y+4, r25	; 0x04
    2a8c:	8b 83       	std	Y+3, r24	; 0x03
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a90:	9e 81       	ldd	r25, Y+6	; 0x06
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	9e 83       	std	Y+6, r25	; 0x06
    2a96:	8d 83       	std	Y+5, r24	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
    2a98:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	69 f7       	brne	.-38     	; 0x2a7a <LCD_Char+0x1ea>
    2aa0:	14 c0       	rjmp	.+40     	; 0x2aca <LCD_Char+0x23a>
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
}

/**
   \ingroup util_delay
    2aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa4:	78 85       	ldd	r23, Y+8	; 0x08
    2aa6:	89 85       	ldd	r24, Y+9	; 0x09
    2aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	9e 83       	std	Y+6, r25	; 0x06
    2ab4:	8d 83       	std	Y+5, r24	; 0x05
    2ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aba:	9a 83       	std	Y+2, r25	; 0x02
    2abc:	89 83       	std	Y+1, r24	; 0x01
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <LCD_Char+0x232>
    2ac6:	9a 83       	std	Y+2, r25	; 0x02
    2ac8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2aca:	6e 96       	adiw	r28, 0x1e	; 30
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <LCD_String>:
void LCD_String(S8 * String)
{
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	00 d0       	rcall	.+0      	; 0x2ae2 <LCD_String+0x6>
    2ae2:	0f 92       	push	r0
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	9b 83       	std	Y+3, r25	; 0x03
    2aea:	8a 83       	std	Y+2, r24	; 0x02
	U8 i;
	for (i=0;String[i] != '\0';i++)
    2aec:	19 82       	std	Y+1, r1	; 0x01
    2aee:	0e c0       	rjmp	.+28     	; 0x2b0c <LCD_String+0x30>
	LCD_Char(String[i]);
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	8a 81       	ldd	r24, Y+2	; 0x02
    2af8:	9b 81       	ldd	r25, Y+3	; 0x03
    2afa:	fc 01       	movw	r30, r24
    2afc:	e2 0f       	add	r30, r18
    2afe:	f3 1f       	adc	r31, r19
    2b00:	80 81       	ld	r24, Z
    2b02:	0e 94 48 14 	call	0x2890	; 0x2890 <LCD_Char>
	_delay_ms(2);
}
void LCD_String(S8 * String)
{
	U8 i;
	for (i=0;String[i] != '\0';i++)
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	8f 5f       	subi	r24, 0xFF	; 255
    2b0a:	89 83       	std	Y+1, r24	; 0x01
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	9b 81       	ldd	r25, Y+3	; 0x03
    2b16:	fc 01       	movw	r30, r24
    2b18:	e2 0f       	add	r30, r18
    2b1a:	f3 1f       	adc	r31, r19
    2b1c:	80 81       	ld	r24, Z
    2b1e:	88 23       	and	r24, r24
    2b20:	39 f7       	brne	.-50     	; 0x2af0 <LCD_String+0x14>
	LCD_Char(String[i]);
}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <LCD_SetPosition>:
void LCD_SetPosition(U8 LineNo, U8 Position)
{
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	00 d0       	rcall	.+0      	; 0x2b34 <LCD_SetPosition+0x6>
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <LCD_SetPosition+0x8>
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	89 83       	std	Y+1, r24	; 0x01
    2b3c:	6a 83       	std	Y+2, r22	; 0x02
	switch(LineNo)
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	28 2f       	mov	r18, r24
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	3c 83       	std	Y+4, r19	; 0x04
    2b46:	2b 83       	std	Y+3, r18	; 0x03
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4c:	81 30       	cpi	r24, 0x01	; 1
    2b4e:	91 05       	cpc	r25, r1
    2b50:	31 f0       	breq	.+12     	; 0x2b5e <LCD_SetPosition+0x30>
    2b52:	2b 81       	ldd	r18, Y+3	; 0x03
    2b54:	3c 81       	ldd	r19, Y+4	; 0x04
    2b56:	22 30       	cpi	r18, 0x02	; 2
    2b58:	31 05       	cpc	r19, r1
    2b5a:	39 f0       	breq	.+14     	; 0x2b6a <LCD_SetPosition+0x3c>
    2b5c:	0b c0       	rjmp	.+22     	; 0x2b74 <LCD_SetPosition+0x46>
	{
		case 1: LCD_Cmd((0x80 | (Position & 0x0F)));break;
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	8f 70       	andi	r24, 0x0F	; 15
    2b62:	80 68       	ori	r24, 0x80	; 128
    2b64:	0e 94 22 13 	call	0x2644	; 0x2644 <LCD_Cmd>
    2b68:	05 c0       	rjmp	.+10     	; 0x2b74 <LCD_SetPosition+0x46>
		case 2: LCD_Cmd((0xC0 | (Position & 0x0F)));break;
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	8f 70       	andi	r24, 0x0F	; 15
    2b6e:	80 6c       	ori	r24, 0xC0	; 192
    2b70:	0e 94 22 13 	call	0x2644	; 0x2644 <LCD_Cmd>
	}
}
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <LCD_Clear>:
void LCD_Clear(void)
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
	LCD_Cmd(0x01);
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	0e 94 22 13 	call	0x2644	; 0x2644 <LCD_Cmd>
}
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <LCD_Custom_Char>:
void LCD_Custom_Char(Custom_Charactars Location,U8 * msg)
{
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	00 d0       	rcall	.+0      	; 0x2b9c <LCD_Custom_Char+0x6>
    2b9c:	00 d0       	rcall	.+0      	; 0x2b9e <LCD_Custom_Char+0x8>
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	8a 83       	std	Y+2, r24	; 0x02
    2ba4:	7c 83       	std	Y+4, r23	; 0x04
    2ba6:	6b 83       	std	Y+3, r22	; 0x03
	if (Location<8)
    2ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    2baa:	88 30       	cpi	r24, 0x08	; 8
    2bac:	f8 f4       	brcc	.+62     	; 0x2bec <LCD_Custom_Char+0x56>
	{
		LCD_Cmd((0x40 + (Location*8)));
    2bae:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb0:	88 2f       	mov	r24, r24
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	08 96       	adiw	r24, 0x08	; 8
    2bb6:	88 0f       	add	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	88 0f       	add	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	0e 94 22 13 	call	0x2644	; 0x2644 <LCD_Cmd>
		U8 i;
		for(i=0;i<8;i++)
    2bc6:	19 82       	std	Y+1, r1	; 0x01
    2bc8:	0e c0       	rjmp	.+28     	; 0x2be6 <LCD_Custom_Char+0x50>
		{
			LCD_Char(msg[i]);
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	e2 0f       	add	r30, r18
    2bd8:	f3 1f       	adc	r31, r19
    2bda:	80 81       	ld	r24, Z
    2bdc:	0e 94 48 14 	call	0x2890	; 0x2890 <LCD_Char>
{
	if (Location<8)
	{
		LCD_Cmd((0x40 + (Location*8)));
		U8 i;
		for(i=0;i<8;i++)
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	8f 5f       	subi	r24, 0xFF	; 255
    2be4:	89 83       	std	Y+1, r24	; 0x01
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	88 30       	cpi	r24, 0x08	; 8
    2bea:	78 f3       	brcs	.-34     	; 0x2bca <LCD_Custom_Char+0x34>
		{
			LCD_Char(msg[i]);
		}
	}
}
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <main>:
#include "Application.h"

#define BLUE 	2
#define WHITE 	3
int main (void)
{
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	aa 97       	sbiw	r28, 0x2a	; 42
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
	intialize_section();
    2c0e:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <intialize_section>

	byte = mfrc522_read(ComIEnReg);
    2c12:	82 e0       	ldi	r24, 0x02	; 2
    2c14:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <mfrc522_read>
    2c18:	80 93 fe 00 	sts	0x00FE, r24
	mfrc522_write(ComIEnReg,byte|0x20);
    2c1c:	80 91 fe 00 	lds	r24, 0x00FE
    2c20:	98 2f       	mov	r25, r24
    2c22:	90 62       	ori	r25, 0x20	; 32
    2c24:	82 e0       	ldi	r24, 0x02	; 2
    2c26:	69 2f       	mov	r22, r25
    2c28:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>
	byte = mfrc522_read(DivIEnReg);
    2c2c:	83 e0       	ldi	r24, 0x03	; 3
    2c2e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <mfrc522_read>
    2c32:	80 93 fe 00 	sts	0x00FE, r24
	mfrc522_write(DivIEnReg,byte|0x80);
    2c36:	80 91 fe 00 	lds	r24, 0x00FE
    2c3a:	98 2f       	mov	r25, r24
    2c3c:	90 68       	ori	r25, 0x80	; 128
    2c3e:	83 e0       	ldi	r24, 0x03	; 3
    2c40:	69 2f       	mov	r22, r25
    2c42:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <mfrc522_write>

	while(1){
	byte = mfrc522_request(PICC_REQALL,str);
    2c46:	2f ef       	ldi	r18, 0xFF	; 255
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	82 e5       	ldi	r24, 0x52	; 82
    2c4c:	b9 01       	movw	r22, r18
    2c4e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <mfrc522_request>
    2c52:	80 93 fe 00 	sts	0x00FE, r24
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	a8 ec       	ldi	r26, 0xC8	; 200
    2c5c:	b2 e4       	ldi	r27, 0x42	; 66
    2c5e:	8f a3       	std	Y+39, r24	; 0x27
    2c60:	98 a7       	std	Y+40, r25	; 0x28
    2c62:	a9 a7       	std	Y+41, r26	; 0x29
    2c64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c66:	6f a1       	ldd	r22, Y+39	; 0x27
    2c68:	78 a5       	ldd	r23, Y+40	; 0x28
    2c6a:	89 a5       	ldd	r24, Y+41	; 0x29
    2c6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	4a ef       	ldi	r20, 0xFA	; 250
    2c74:	54 e4       	ldi	r21, 0x44	; 68
    2c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	8b a3       	std	Y+35, r24	; 0x23
    2c80:	9c a3       	std	Y+36, r25	; 0x24
    2c82:	ad a3       	std	Y+37, r26	; 0x25
    2c84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c86:	6b a1       	ldd	r22, Y+35	; 0x23
    2c88:	7c a1       	ldd	r23, Y+36	; 0x24
    2c8a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c8c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	40 e8       	ldi	r20, 0x80	; 128
    2c94:	5f e3       	ldi	r21, 0x3F	; 63
    2c96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c9a:	88 23       	and	r24, r24
    2c9c:	2c f4       	brge	.+10     	; 0x2ca8 <main+0xae>
		__ticks = 1;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	9a a3       	std	Y+34, r25	; 0x22
    2ca4:	89 a3       	std	Y+33, r24	; 0x21
    2ca6:	3f c0       	rjmp	.+126    	; 0x2d26 <main+0x12c>
	else if (__tmp > 65535)
    2ca8:	6b a1       	ldd	r22, Y+35	; 0x23
    2caa:	7c a1       	ldd	r23, Y+36	; 0x24
    2cac:	8d a1       	ldd	r24, Y+37	; 0x25
    2cae:	9e a1       	ldd	r25, Y+38	; 0x26
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	3f ef       	ldi	r19, 0xFF	; 255
    2cb4:	4f e7       	ldi	r20, 0x7F	; 127
    2cb6:	57 e4       	ldi	r21, 0x47	; 71
    2cb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cbc:	18 16       	cp	r1, r24
    2cbe:	4c f5       	brge	.+82     	; 0x2d12 <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc0:	6f a1       	ldd	r22, Y+39	; 0x27
    2cc2:	78 a5       	ldd	r23, Y+40	; 0x28
    2cc4:	89 a5       	ldd	r24, Y+41	; 0x29
    2cc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	40 e2       	ldi	r20, 0x20	; 32
    2cce:	51 e4       	ldi	r21, 0x41	; 65
    2cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	9a a3       	std	Y+34, r25	; 0x22
    2ce6:	89 a3       	std	Y+33, r24	; 0x21
    2ce8:	0f c0       	rjmp	.+30     	; 0x2d08 <main+0x10e>
    2cea:	88 ec       	ldi	r24, 0xC8	; 200
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	98 a3       	std	Y+32, r25	; 0x20
    2cf0:	8f 8f       	std	Y+31, r24	; 0x1f
    2cf2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cf4:	98 a1       	ldd	r25, Y+32	; 0x20
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <main+0xfc>
    2cfa:	98 a3       	std	Y+32, r25	; 0x20
    2cfc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfe:	89 a1       	ldd	r24, Y+33	; 0x21
    2d00:	9a a1       	ldd	r25, Y+34	; 0x22
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	9a a3       	std	Y+34, r25	; 0x22
    2d06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d08:	89 a1       	ldd	r24, Y+33	; 0x21
    2d0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	69 f7       	brne	.-38     	; 0x2cea <main+0xf0>
    2d10:	14 c0       	rjmp	.+40     	; 0x2d3a <main+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d12:	6b a1       	ldd	r22, Y+35	; 0x23
    2d14:	7c a1       	ldd	r23, Y+36	; 0x24
    2d16:	8d a1       	ldd	r24, Y+37	; 0x25
    2d18:	9e a1       	ldd	r25, Y+38	; 0x26
    2d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	9a a3       	std	Y+34, r25	; 0x22
    2d24:	89 a3       	std	Y+33, r24	; 0x21
    2d26:	89 a1       	ldd	r24, Y+33	; 0x21
    2d28:	9a a1       	ldd	r25, Y+34	; 0x22
    2d2a:	9e 8f       	std	Y+30, r25	; 0x1e
    2d2c:	8d 8f       	std	Y+29, r24	; 0x1d
    2d2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <main+0x138>
    2d36:	9e 8f       	std	Y+30, r25	; 0x1e
    2d38:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
			if(byte == CARD_FOUND)
    2d3a:	80 91 fe 00 	lds	r24, 0x00FE
    2d3e:	81 30       	cpi	r24, 0x01	; 1
    2d40:	69 f5       	brne	.+90     	; 0x2d9c <main+0x1a2>
			{
			  byte = mfrc522_get_card_serial(str);
    2d42:	8f ef       	ldi	r24, 0xFF	; 255
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	0e 94 51 11 	call	0x22a2	; 0x22a2 <mfrc522_get_card_serial>
    2d4a:	80 93 fe 00 	sts	0x00FE, r24
			  if(byte == CARD_FOUND)
    2d4e:	80 91 fe 00 	lds	r24, 0x00FE
    2d52:	81 30       	cpi	r24, 0x01	; 1
    2d54:	19 f5       	brne	.+70     	; 0x2d9c <main+0x1a2>
			  {
				DIO_WriteChannel(DIO_ChannelA0 ,STD_High);
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	61 e0       	ldi	r22, 0x01	; 1
    2d5a:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
				person_recognised = 1;
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	80 93 fc 00 	sts	0x00FC, r24
				UART_SendByte('@');
    2d64:	80 e4       	ldi	r24, 0x40	; 64
    2d66:	0e 94 46 08 	call	0x108c	; 0x108c <UART_SendByte>
				for(byte=0;byte<8;byte++){
    2d6a:	10 92 fe 00 	sts	0x00FE, r1
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <main+0x194>
					UART_SendByte(str[byte]);
    2d70:	80 91 fe 00 	lds	r24, 0x00FE
    2d74:	88 2f       	mov	r24, r24
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	fc 01       	movw	r30, r24
    2d7a:	e1 50       	subi	r30, 0x01	; 1
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	80 81       	ld	r24, Z
    2d80:	0e 94 46 08 	call	0x108c	; 0x108c <UART_SendByte>
			  if(byte == CARD_FOUND)
			  {
				DIO_WriteChannel(DIO_ChannelA0 ,STD_High);
				person_recognised = 1;
				UART_SendByte('@');
				for(byte=0;byte<8;byte++){
    2d84:	80 91 fe 00 	lds	r24, 0x00FE
    2d88:	8f 5f       	subi	r24, 0xFF	; 255
    2d8a:	80 93 fe 00 	sts	0x00FE, r24
    2d8e:	80 91 fe 00 	lds	r24, 0x00FE
    2d92:	88 30       	cpi	r24, 0x08	; 8
    2d94:	68 f3       	brcs	.-38     	; 0x2d70 <main+0x176>
					UART_SendByte(str[byte]);
				}
				UART_SendByte(';');
    2d96:	8b e3       	ldi	r24, 0x3B	; 59
    2d98:	0e 94 46 08 	call	0x108c	; 0x108c <UART_SendByte>
				}

			}
			if(1 == person_recognised){
    2d9c:	80 91 fc 00 	lds	r24, 0x00FC
    2da0:	81 30       	cpi	r24, 0x01	; 1
    2da2:	09 f0       	breq	.+2      	; 0x2da6 <main+0x1ac>
    2da4:	50 cf       	rjmp	.-352    	; 0x2c46 <main+0x4c>
				person_recognised = 0;
    2da6:	10 92 fc 00 	sts	0x00FC, r1
			data_recieved = UART_ReceiveByte();
    2daa:	0e 94 60 08 	call	0x10c0	; 0x10c0 <UART_ReceiveByte>
    2dae:	80 93 fd 00 	sts	0x00FD, r24
			if('1' == data_recieved){
    2db2:	80 91 fd 00 	lds	r24, 0x00FD
    2db6:	81 33       	cpi	r24, 0x31	; 49
    2db8:	09 f0       	breq	.+2      	; 0x2dbc <main+0x1c2>
    2dba:	7f c0       	rjmp	.+254    	; 0x2eba <main+0x2c0>
				DIO_WriteChannel(DIO_ChannelA1 ,STD_High);
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	61 e0       	ldi	r22, 0x01	; 1
    2dc0:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	aa ef       	ldi	r26, 0xFA	; 250
    2dca:	b3 e4       	ldi	r27, 0x43	; 67
    2dcc:	89 8f       	std	Y+25, r24	; 0x19
    2dce:	9a 8f       	std	Y+26, r25	; 0x1a
    2dd0:	ab 8f       	std	Y+27, r26	; 0x1b
    2dd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd4:	69 8d       	ldd	r22, Y+25	; 0x19
    2dd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	4a ef       	ldi	r20, 0xFA	; 250
    2de2:	54 e4       	ldi	r21, 0x44	; 68
    2de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	8d 8b       	std	Y+21, r24	; 0x15
    2dee:	9e 8b       	std	Y+22, r25	; 0x16
    2df0:	af 8b       	std	Y+23, r26	; 0x17
    2df2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2df4:	6d 89       	ldd	r22, Y+21	; 0x15
    2df6:	7e 89       	ldd	r23, Y+22	; 0x16
    2df8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e8       	ldi	r20, 0x80	; 128
    2e02:	5f e3       	ldi	r21, 0x3F	; 63
    2e04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e08:	88 23       	and	r24, r24
    2e0a:	2c f4       	brge	.+10     	; 0x2e16 <main+0x21c>
		__ticks = 1;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	9c 8b       	std	Y+20, r25	; 0x14
    2e12:	8b 8b       	std	Y+19, r24	; 0x13
    2e14:	3f c0       	rjmp	.+126    	; 0x2e94 <main+0x29a>
	else if (__tmp > 65535)
    2e16:	6d 89       	ldd	r22, Y+21	; 0x15
    2e18:	7e 89       	ldd	r23, Y+22	; 0x16
    2e1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	3f ef       	ldi	r19, 0xFF	; 255
    2e22:	4f e7       	ldi	r20, 0x7F	; 127
    2e24:	57 e4       	ldi	r21, 0x47	; 71
    2e26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e2a:	18 16       	cp	r1, r24
    2e2c:	4c f5       	brge	.+82     	; 0x2e80 <main+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e2       	ldi	r20, 0x20	; 32
    2e3c:	51 e4       	ldi	r21, 0x41	; 65
    2e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	bc 01       	movw	r22, r24
    2e48:	cd 01       	movw	r24, r26
    2e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	9c 8b       	std	Y+20, r25	; 0x14
    2e54:	8b 8b       	std	Y+19, r24	; 0x13
    2e56:	0f c0       	rjmp	.+30     	; 0x2e76 <main+0x27c>
    2e58:	88 ec       	ldi	r24, 0xC8	; 200
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	9a 8b       	std	Y+18, r25	; 0x12
    2e5e:	89 8b       	std	Y+17, r24	; 0x11
    2e60:	89 89       	ldd	r24, Y+17	; 0x11
    2e62:	9a 89       	ldd	r25, Y+18	; 0x12
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	f1 f7       	brne	.-4      	; 0x2e64 <main+0x26a>
    2e68:	9a 8b       	std	Y+18, r25	; 0x12
    2e6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	9c 8b       	std	Y+20, r25	; 0x14
    2e74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e76:	8b 89       	ldd	r24, Y+19	; 0x13
    2e78:	9c 89       	ldd	r25, Y+20	; 0x14
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	69 f7       	brne	.-38     	; 0x2e58 <main+0x25e>
    2e7e:	14 c0       	rjmp	.+40     	; 0x2ea8 <main+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e80:	6d 89       	ldd	r22, Y+21	; 0x15
    2e82:	7e 89       	ldd	r23, Y+22	; 0x16
    2e84:	8f 89       	ldd	r24, Y+23	; 0x17
    2e86:	98 8d       	ldd	r25, Y+24	; 0x18
    2e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9c 8b       	std	Y+20, r25	; 0x14
    2e92:	8b 8b       	std	Y+19, r24	; 0x13
    2e94:	8b 89       	ldd	r24, Y+19	; 0x13
    2e96:	9c 89       	ldd	r25, Y+20	; 0x14
    2e98:	98 8b       	std	Y+16, r25	; 0x10
    2e9a:	8f 87       	std	Y+15, r24	; 0x0f
    2e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e9e:	98 89       	ldd	r25, Y+16	; 0x10
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	f1 f7       	brne	.-4      	; 0x2ea0 <main+0x2a6>
    2ea4:	98 8b       	std	Y+16, r25	; 0x10
    2ea6:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				DIO_WriteChannel(DIO_ChannelA1 ,STD_Low);
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
        DIO_WriteChannel(DIO_ChannelA0 ,STD_Low);
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
    2eb8:	c6 ce       	rjmp	.-628    	; 0x2c46 <main+0x4c>
			}
			else if('2' == data_recieved){
    2eba:	80 91 fd 00 	lds	r24, 0x00FD
    2ebe:	82 33       	cpi	r24, 0x32	; 50
    2ec0:	09 f0       	breq	.+2      	; 0x2ec4 <main+0x2ca>
    2ec2:	c1 ce       	rjmp	.-638    	; 0x2c46 <main+0x4c>
				DIO_WriteChannel(DIO_ChannelA2 ,STD_High);
    2ec4:	82 e0       	ldi	r24, 0x02	; 2
    2ec6:	61 e0       	ldi	r22, 0x01	; 1
    2ec8:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	aa ef       	ldi	r26, 0xFA	; 250
    2ed2:	b3 e4       	ldi	r27, 0x43	; 67
    2ed4:	8b 87       	std	Y+11, r24	; 0x0b
    2ed6:	9c 87       	std	Y+12, r25	; 0x0c
    2ed8:	ad 87       	std	Y+13, r26	; 0x0d
    2eda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	4a ef       	ldi	r20, 0xFA	; 250
    2eea:	54 e4       	ldi	r21, 0x44	; 68
    2eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	8f 83       	std	Y+7, r24	; 0x07
    2ef6:	98 87       	std	Y+8, r25	; 0x08
    2ef8:	a9 87       	std	Y+9, r26	; 0x09
    2efa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2efc:	6f 81       	ldd	r22, Y+7	; 0x07
    2efe:	78 85       	ldd	r23, Y+8	; 0x08
    2f00:	89 85       	ldd	r24, Y+9	; 0x09
    2f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e8       	ldi	r20, 0x80	; 128
    2f0a:	5f e3       	ldi	r21, 0x3F	; 63
    2f0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f10:	88 23       	and	r24, r24
    2f12:	2c f4       	brge	.+10     	; 0x2f1e <main+0x324>
		__ticks = 1;
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	9e 83       	std	Y+6, r25	; 0x06
    2f1a:	8d 83       	std	Y+5, r24	; 0x05
    2f1c:	3f c0       	rjmp	.+126    	; 0x2f9c <main+0x3a2>
	else if (__tmp > 65535)
    2f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f20:	78 85       	ldd	r23, Y+8	; 0x08
    2f22:	89 85       	ldd	r24, Y+9	; 0x09
    2f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	3f ef       	ldi	r19, 0xFF	; 255
    2f2a:	4f e7       	ldi	r20, 0x7F	; 127
    2f2c:	57 e4       	ldi	r21, 0x47	; 71
    2f2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f32:	18 16       	cp	r1, r24
    2f34:	4c f5       	brge	.+82     	; 0x2f88 <main+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	40 e2       	ldi	r20, 0x20	; 32
    2f44:	51 e4       	ldi	r21, 0x41	; 65
    2f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	bc 01       	movw	r22, r24
    2f50:	cd 01       	movw	r24, r26
    2f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	9e 83       	std	Y+6, r25	; 0x06
    2f5c:	8d 83       	std	Y+5, r24	; 0x05
    2f5e:	0f c0       	rjmp	.+30     	; 0x2f7e <main+0x384>
    2f60:	88 ec       	ldi	r24, 0xC8	; 200
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	9c 83       	std	Y+4, r25	; 0x04
    2f66:	8b 83       	std	Y+3, r24	; 0x03
    2f68:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <main+0x372>
    2f70:	9c 83       	std	Y+4, r25	; 0x04
    2f72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f74:	8d 81       	ldd	r24, Y+5	; 0x05
    2f76:	9e 81       	ldd	r25, Y+6	; 0x06
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	9e 83       	std	Y+6, r25	; 0x06
    2f7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f80:	9e 81       	ldd	r25, Y+6	; 0x06
    2f82:	00 97       	sbiw	r24, 0x00	; 0
    2f84:	69 f7       	brne	.-38     	; 0x2f60 <main+0x366>
    2f86:	14 c0       	rjmp	.+40     	; 0x2fb0 <main+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f88:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8a:	78 85       	ldd	r23, Y+8	; 0x08
    2f8c:	89 85       	ldd	r24, Y+9	; 0x09
    2f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	9e 83       	std	Y+6, r25	; 0x06
    2f9a:	8d 83       	std	Y+5, r24	; 0x05
    2f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa0:	9a 83       	std	Y+2, r25	; 0x02
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	f1 f7       	brne	.-4      	; 0x2fa8 <main+0x3ae>
    2fac:	9a 83       	std	Y+2, r25	; 0x02
    2fae:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				DIO_WriteChannel(DIO_ChannelA2 ,STD_Low);
    2fb0:	82 e0       	ldi	r24, 0x02	; 2
    2fb2:	60 e0       	ldi	r22, 0x00	; 0
    2fb4:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
        DIO_WriteChannel(DIO_ChannelA0 ,STD_Low);
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	60 e0       	ldi	r22, 0x00	; 0
    2fbc:	0e 94 ad 09 	call	0x135a	; 0x135a <DIO_WriteChannel>
    2fc0:	42 ce       	rjmp	.-892    	; 0x2c46 <main+0x4c>

00002fc2 <intialize_section>:
		}
	}
return 0;
}

void intialize_section(void){
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
	SPI_Init(&SPI_Options);
    2fca:	88 ea       	ldi	r24, 0xA8	; 168
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	0e 94 8e 08 	call	0x111c	; 0x111c <SPI_Init>
	mfrc522_init();
    2fd2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <mfrc522_init>
	UART_Init();
    2fd6:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_Init>
	DIO_ConfigChannel(DIO_ChannelA0 ,OUTPUT);
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	61 e0       	ldi	r22, 0x01	; 1
    2fde:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelA1 ,OUTPUT);
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	61 e0       	ldi	r22, 0x01	; 1
    2fe6:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelA2 ,OUTPUT);
    2fea:	82 e0       	ldi	r24, 0x02	; 2
    2fec:	61 e0       	ldi	r22, 0x01	; 1
    2fee:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_ConfigChannel>

}
    2ff2:	cf 91       	pop	r28
    2ff4:	df 91       	pop	r29
    2ff6:	08 95       	ret

00002ff8 <__prologue_saves__>:
    2ff8:	2f 92       	push	r2
    2ffa:	3f 92       	push	r3
    2ffc:	4f 92       	push	r4
    2ffe:	5f 92       	push	r5
    3000:	6f 92       	push	r6
    3002:	7f 92       	push	r7
    3004:	8f 92       	push	r8
    3006:	9f 92       	push	r9
    3008:	af 92       	push	r10
    300a:	bf 92       	push	r11
    300c:	cf 92       	push	r12
    300e:	df 92       	push	r13
    3010:	ef 92       	push	r14
    3012:	ff 92       	push	r15
    3014:	0f 93       	push	r16
    3016:	1f 93       	push	r17
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	ca 1b       	sub	r28, r26
    3022:	db 0b       	sbc	r29, r27
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	de bf       	out	0x3e, r29	; 62
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	cd bf       	out	0x3d, r28	; 61
    302e:	09 94       	ijmp

00003030 <__epilogue_restores__>:
    3030:	2a 88       	ldd	r2, Y+18	; 0x12
    3032:	39 88       	ldd	r3, Y+17	; 0x11
    3034:	48 88       	ldd	r4, Y+16	; 0x10
    3036:	5f 84       	ldd	r5, Y+15	; 0x0f
    3038:	6e 84       	ldd	r6, Y+14	; 0x0e
    303a:	7d 84       	ldd	r7, Y+13	; 0x0d
    303c:	8c 84       	ldd	r8, Y+12	; 0x0c
    303e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3040:	aa 84       	ldd	r10, Y+10	; 0x0a
    3042:	b9 84       	ldd	r11, Y+9	; 0x09
    3044:	c8 84       	ldd	r12, Y+8	; 0x08
    3046:	df 80       	ldd	r13, Y+7	; 0x07
    3048:	ee 80       	ldd	r14, Y+6	; 0x06
    304a:	fd 80       	ldd	r15, Y+5	; 0x05
    304c:	0c 81       	ldd	r16, Y+4	; 0x04
    304e:	1b 81       	ldd	r17, Y+3	; 0x03
    3050:	aa 81       	ldd	r26, Y+2	; 0x02
    3052:	b9 81       	ldd	r27, Y+1	; 0x01
    3054:	ce 0f       	add	r28, r30
    3056:	d1 1d       	adc	r29, r1
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	f8 94       	cli
    305c:	de bf       	out	0x3e, r29	; 62
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	cd bf       	out	0x3d, r28	; 61
    3062:	ed 01       	movw	r28, r26
    3064:	08 95       	ret

00003066 <_exit>:
    3066:	f8 94       	cli

00003068 <__stop_program>:
    3068:	ff cf       	rjmp	.-2      	; 0x3068 <__stop_program>
